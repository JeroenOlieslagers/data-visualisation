{"version":3,"sources":["images/fano_window_refr.svg","images/book_cover.jpg","logo.svg","images/abc.svg","images/fano_window.svg","images/isi_hist.svg","images/fano.svg","images/cv.svg","images/spike_train_bw.svg","images/spike_train_refr.svg","images/isi_refr.svg","images/cv_refr.svg","images/isis_refr.svg","images/norm_approx.svg","images/perf1.svg","images/perf2.svg","images/method_of_moments.svg","images/mean_fit.svg","images/var_fit.svg","actions.js","components/NavigationBar.js","components/utils.js","components/configDashboards/SliderInput.js","components/CustomCard.js","components/configDashboards/NormalConfig.js","components/randomDataGenerator.js","components/NormalChart.js","components/Tag.js","Normal.js","components/configDashboards/PoissonConfig.js","components/PoissonChart.js","Poisson.js","neur/chapter1.js","ipython.js","rayTracing.js","neur/neurInfo.js","neur/extensions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","sliderChange","event","newValue","value","name","type","inputChange","clip","max","toggleUpdateData","togglePerformanceChart","NavigationBar","handleOpen","stopPropagation","setState","anchorEl","currentTarget","tabId","id","open","state","changeStatsTab","props","setTab","handleClose","statsTab","changeNeurTab","neurTab","HideOnScroll","AppBar","Tabs","centered","this","selectedTab","onChange","Tab","label","classes","wrapper","icon","ArrowDropDown","onClick","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","className","style","display","React","Component","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","mapDispatchToProps","connect","Poisson","lambda","x","Math","pow","exp","factorial","BoxMuller","mu","sigma","u","v","random","sqrt","log","cos","PI","InverseTransformSampling","Error","p","s","createHistogram","data","console","time","positives","negatives","hist","keys","Object","slice","length","forEach","item","key","sign","others","timeEnd","logToLin","y","floor","log10","round","Vector","l2","l22","SliderInput","Typography","gutterBottom","Grid","container","spacing","alignItems","xs","Slider","valueName","onChangeCommitted","aria-labelledby","Input","margin","onBlur","handleBlur","inputProps","CustomCard","useState","expanded","setExpanded","Card","CardHeader","disableTypography","title","variant","IconButton","aria-expanded","aria-label","classNames","ExpandMore","avatar","Collapse","CardContent","NormalConfig","Tune","mean","normal","GraphicEq","stDev","BlurOn","samples","ScatterPlot","FormControl","component","FormGroup","FormControlLabel","control","Checkbox","checked","performanceChart","FormHelperText","generateChartData","countries","rules","slope","isStatic","independent","dependent","chartData","startingDataPoint","firstDate","Date","setDate","getDate","index","prevDataPoint","newDataPoint","i","newDate","date","includes","push","NormalChart","chart","am4core","commercialLicense","prevPerf","createChart","d","utils","randomDataGenerator","positiveData","positiveKeys","negativeData","negativeKeys","sort","a","b","Number","concat","dummy","dataPoint","parseInt","hasZero","dark","animated","refs","normal_chart","am4charts","categoryField","createData","xAxis","xAxes","dataFields","category","renderer","grid","strokeDasharray","range","axisRanges","create","paddingTop","fontSize","stroke","strokeWidth","strokeOpacity","yAxes","colorSet","yAxis2","template","disabled","line","getIndex","opposite","normalBM","series","valueY","categoryX","fillOpacity","tensionX","columns","width","uniform","hidden","cfdBM","yAxis","cursor","legend","markers","height","itemContainers","paddingRight","paddingLeft","paddingBottom","updateData","queue","minPolylineStep","BarChart","ref","Tag","makeStyles","theme","tag","position","right","toString","top","Normal","Paper","align","Link","href","PoissonConfig","poisson","PoissonChart","poisson_chart","poissonITS","cfd","Chapter1","Subject","justify","Code","language","CardMedia","image","abc","spike_train_bw","fano_window","isi_hist","fano","cv","spike_train_refr","isi_refr","cv_refr","isis_refr","fano_window_refr","IPython","RayTracing","recursiveReflection","start","n","intersections","objects","j","calculateIntersect","frame","minDist","nearestIntersectIndex","dist","vMinus","drawLine","numberOfRays","normals","frame_normals","drawCircle","reflectedRay","reflect","vPlus","shootMode","setTimeout","shootDelay","refraction","refractedRay","refract","refractiveIndex","clicked","rect","cvs","getBoundingClientRect","addMode","polyDraw","poly","drawPolygon","left","polyRadius","polyN","polyAngle","objectsText","innerHTML","edgesText","addedFirstVertex","calculateNormal","draw","source","set","onScroll","deltaY","polyDrawText","multiRayMode","multiRayN","multiRayText","onMouseMove","view","addObject","keyCode","pop","frame_on","frameText","recursionDepth","recursionDepthText","refractionText","showNormals","normalsText","popped","shootModeText","document","getElementById","ctx","getContext","addEventListener","raysText","c","q","r","mult","dot","normalise","cosi","min","etai","etat","N","temp","eta","k","beginPath","moveTo","lineTo","closePath","strokeStyle","arc","fillStyle","fill","t","angle","atan2","head1","sin","head2","getVector","theta","segment","phi","polyVector","polyNormals","clearRect","lineWidth","strokeRect","drawArrow","ray","draw_border","fillRect","drawObjects","drawNormals","drawMultiRays","innerWidth","innerHeight","htmlFor","placeholder","NeurInfo","book_cover","NeurExt","norm_approx","perf1","perf2","method_of_moments","mean_fit","var_fit","App","src","logo","alt","Boolean","location","hostname","match","createMuiTheme","palette","secondary","main","initialState","store","createStore","action","produce","draft","linToLog","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c3e340a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fano_window_refr.c556c42b.svg\";","module.exports = __webpack_public_path__ + \"static/media/book_cover.cdf0f8da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/abc.cc2c3055.svg\";","module.exports = __webpack_public_path__ + \"static/media/fano_window.05cbecb4.svg\";","module.exports = __webpack_public_path__ + \"static/media/isi_hist.2d099cc1.svg\";","module.exports = __webpack_public_path__ + \"static/media/fano.e25c800e.svg\";","module.exports = __webpack_public_path__ + \"static/media/cv.3058790b.svg\";","module.exports = __webpack_public_path__ + \"static/media/spike_train_bw.045475bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/spike_train_refr.5bbf66f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/isi_refr.1b2fafb3.svg\";","module.exports = __webpack_public_path__ + \"static/media/cv_refr.af9b39bc.svg\";","module.exports = __webpack_public_path__ + \"static/media/isis_refr.497828fc.svg\";","module.exports = __webpack_public_path__ + \"static/media/norm_approx.385a157a.svg\";","module.exports = __webpack_public_path__ + \"static/media/perf1.9c184698.svg\";","module.exports = __webpack_public_path__ + \"static/media/perf2.c4b61154.svg\";","module.exports = __webpack_public_path__ + \"static/media/method_of_moments.8c9931f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/mean_fit.0ab27344.svg\";","module.exports = __webpack_public_path__ + \"static/media/var_fit.3b7916c5.svg\";","export const SLIDER_CHANGE = 'SLIDER_CHANGE';\r\nexport const INPUT_CHANGE = 'INPUT_CHANGE';\r\nexport const CLIP = 'CLIP';\r\nexport const TOGGLE_UPDATE_DATA = 'TOGGLE_UPDATE_DATA';\r\nexport const SET_TAB = 'SET_TAB';\r\nexport const TOGGLE_PERFORMANCE_CHART = 'TOGGLE_PERFORMANCE_CHART';\r\n\r\nexport const sliderChange = (event, newValue, value, name) => ({type: SLIDER_CHANGE, newValue: newValue, value: value, event: event, name: name});\r\nexport const inputChange = (event, value, name) => ({type: INPUT_CHANGE, event: event, value: value, name: name});\r\nexport const clip = (max, value, name) => ({type: CLIP, max: max, value: value, name: name});\r\nexport const toggleUpdateData = name => ({type: TOGGLE_UPDATE_DATA, name: name});\r\nexport const setTab = (event, value) => ({type: SET_TAB, value: value});\r\nexport const togglePerformanceChart = name => ({type: TOGGLE_PERFORMANCE_CHART, name: name});\r\n","import {AppBar, Slide, Tab, Tabs, useScrollTrigger, TextField, MenuItem, Popover} from '@material-ui/core';\r\nimport React from 'react';\r\nimport {setTab} from '../actions';\r\nimport {connect} from 'react-redux';\r\nimport {ArrowDropDown} from '@material-ui/icons';\r\n\r\nclass NavigationBar extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      statsTab: 'normal',\r\n      neurTab: 'neurInfo',\r\n      open: false\r\n    }\r\n  }\r\n\r\n  handleOpen = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      anchorEl: event.currentTarget,\r\n      tabId: event.currentTarget.id,\r\n      open: !this.state.open\r\n    });\r\n  };\r\n\r\n  changeStatsTab = (event, value) => {\r\n    this.props.setTab(event, value);\r\n    this.handleClose(event);\r\n    this.setState({\r\n      statsTab: value\r\n    })\r\n  };\r\n\r\n  changeNeurTab = (event, value) => {\r\n    this.props.setTab(event, value);\r\n    this.handleClose(event);\r\n    this.setState({\r\n      neurTab: value\r\n    })\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      anchorEl: null,\r\n      tabId: null,\r\n      open: !this.state.open\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <HideOnScroll>\r\n        <AppBar>\r\n          <Tabs centered value={this.props.selectedTab} onChange={this.props.setTab}>\r\n            <Tab label=\"home\" value={'home'} />\r\n            <Tab classes={{wrapper: 'stats__tab'}} label=\"Stats\" value={this.state.statsTab} id={\"stats-tab\"} icon={<ArrowDropDown />} onClick={this.handleOpen}/>\r\n            <Tab classes={{wrapper: 'stats__tab'}} label=\"Theoretical Neuroscience\" value={this.state.neurTab} id={\"neur-tab\"} icon={<ArrowDropDown />} onClick={this.handleOpen}/>\r\n            <Tab label=\"Ray Tracing\" value={'rayTracing'} />\r\n            <Tab label=\"IPython Notebooks\" value={'ipython'} />\r\n          </Tabs>\r\n          <Popover\r\n            open={this.state.open}\r\n            anchorEl={this.state.anchorEl}\r\n            onClose={this.handleClose}\r\n            anchorOrigin={{\r\n              vertical: \"bottom\",\r\n              horizontal: \"left\"\r\n            }}\r\n            transformOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"left\"\r\n            }}\r\n          >\r\n            <MenuItem className={'stats__menu'} style={{display: this.state.tabId === 'stats-tab' ? 'flex' : 'none'}} onClick={event => this.changeStatsTab(event, 'normal')}>\r\n              Normal\r\n            </MenuItem>\r\n            <MenuItem className={'stats__menu'} style={{display: this.state.tabId === 'stats-tab' ? 'flex' : 'none'}} onClick={event => this.changeStatsTab(event, 'poisson')}>\r\n              Poisson\r\n            </MenuItem>\r\n            <MenuItem className={'stats__menu'} style={{display: this.state.tabId === 'neur-tab' ? 'flex' : 'none'}} onClick={event => this.changeNeurTab(event, 'neurInfo')}>\r\n              Info\r\n            </MenuItem>\r\n            <MenuItem className={'stats__menu'} style={{display: this.state.tabId === 'neur-tab' ? 'flex' : 'none'}} onClick={event => this.changeNeurTab(event, 'chapter1')}>\r\n              Chapter 1\r\n            </MenuItem>\r\n            <MenuItem className={'stats__menu'} style={{display: this.state.tabId === 'neur-tab' ? 'flex' : 'none'}} onClick={event => this.changeNeurTab(event, 'neurExt')}>\r\n              Extensions\r\n            </MenuItem>\r\n          </Popover>\r\n        </AppBar>\r\n      </HideOnScroll>\r\n    );\r\n  }\r\n}\r\n\r\nfunction HideOnScroll(props) {\r\n  const {children, window} = props;\r\n  const trigger = useScrollTrigger({target: window ? window() : undefined});\r\n\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      {children}\r\n    </Slide>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    selectedTab: state.selectedTab\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setTab\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(NavigationBar);\r\n","/**\r\n * Analytically calculates the Normal distribution\r\n * @return {number}\r\n */\r\nexport function Gaussian(mu, sigma, x) {\r\n  return (1 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-0.5 * Math.pow((x - mu) / sigma, 2));\r\n}\r\n\r\n\r\n/**\r\n * Analytically calculates the Poisson distribution\r\n * @return {number}\r\n */\r\nexport function Poisson(lambda, x) {\r\n  if (x < 0) {\r\n    return 0\r\n  }\r\n  return (Math.pow(lambda, x) * Math.exp(-lambda)) / (factorial(x))\r\n}\r\n\r\n/**\r\n * Helper function to calculate the factorial of a number recursively\r\n * @return {number}\r\n */\r\nfunction factorial(x) {\r\n  if (x === 0) {\r\n    return 1\r\n  }\r\n  else {\r\n    return x*factorial(x-1);\r\n  }\r\n}\r\n\r\n/**\r\n * Box-Muller transform on the uniform distribution from the built-in Math.random() method\r\n * @param mu - the mean of the distribution\r\n * @param sigma - the variance of the distribution\r\n * @return {number}\r\n */\r\nexport function BoxMuller(mu = 0, sigma = 1) {\r\n  let u = 0, v = 0;\r\n  while (u === 0) u = Math.random();\r\n  while (v === 0) v = Math.random();\r\n  let z1 = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n  return z1 * sigma + mu;\r\n}\r\n\r\n/**\r\n * Inverse transform sampling on the formula e^-x to get a Poisson distribution\r\n * @return {number}\r\n */\r\nexport function InverseTransformSampling(lambda = 0) {\r\n  if (lambda > 1000) {\r\n    throw new Error('Value of Lambda too large')\r\n  }\r\n  let x = 0, p = Math.exp(-lambda), s = p, u = Math.random();\r\n  while (s < u) {\r\n    x++;\r\n    p *= lambda / x;\r\n    s += p;\r\n  }\r\n  return x;\r\n}\r\n\r\n/**\r\n * Converts data from generator to histogram\r\n */\r\nexport function createHistogram(data) {\r\n  console.time('histogram');\r\n  let positives = [];\r\n  let negatives = [];\r\n  let hist = [];\r\n  let keys = Object.keys(data[0]).slice(1, data.length);\r\n  data.forEach(item => {\r\n    keys.forEach(key => {\r\n      if (Math.sign(item[key]) === -1) {\r\n        hist = negatives\r\n      }\r\n      else {\r\n        hist = positives\r\n      }\r\n      if (!hist[item[key]]) {\r\n        hist[item[key]] = {};\r\n        keys.forEach(others => {\r\n          hist[item[key]][others] = 0;\r\n        });\r\n        hist[item[key]][key] = 1;\r\n      }\r\n      else {\r\n        hist[item[key]][key] += 1;\r\n      }\r\n    });\r\n  });\r\n  console.timeEnd('histogram');\r\n  return [positives, negatives];\r\n}\r\n\r\n/**\r\n * Converts linear scale to logarithmic scale\r\n * @param x\r\n * @returns {number}\r\n */\r\nexport function linToLog(x) {\r\n  const y = Math.floor((x + Math.floor(x / 10)) / 10);\r\n  return ((x + y) % 10) * Math.pow(10, y);\r\n}\r\n\r\n/**\r\n * Converts logarithmic scale to linear scale\r\n * @param x\r\n * @returns {number}\r\n */\r\nexport function logToLin(x) {\r\n  const y = Math.floor(Math.log10(x === 0 ? 1 : x));\r\n  return (y === 0 ? x : Math.round(x / Math.pow(10, y))) + y * 9;\r\n}\r\n\r\n/**\r\n * Vector (2D) class for ray tracing calculations\r\n * @param x: x component of Vector\r\n * @param y: y component of Vector\r\n * @method vMinus: subtracts two Vectors\r\n * @method vPlus: adds two Vectors\r\n * @method mult: multiplies a Vector by a scalar\r\n * @method dot: returns the scalar dot product between two Vectors\r\n * @method set: sets x and y params of a Vector instance\r\n * @method normalise: normalises the Vector accodring to the L2 norm\r\n * @method p: getter method to obtain the x and y coords as array\r\n * @method l22: getter method to obtain the square of the L2 norm of the vector\r\n */\r\nexport class Vector{\r\n  constructor(x, y){\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  vMinus(target){\r\n    return new Vector(this.x - target.x, this.y - target.y);\r\n  }\r\n  vPlus(target){\r\n    return new Vector(this.x + target.x, this.y + target.y);\r\n  }\r\n  mult(target){\r\n    return new Vector(this.x * target, this.y * target);\r\n  }\r\n  dot(target){\r\n    return this.x * target.x + this.y * target.y\r\n  }\r\n  set(x, y){\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  normalise(){\r\n    let l2 = Math.sqrt(this.l22);\r\n    this.x = this.x / l2;\r\n    this.y = this.y / l2;\r\n  }\r\n  get p(){\r\n    return [this.x, this.y]\r\n  }\r\n  get l22(){\r\n    return Math.pow(this.x, 2) + Math.pow(this.y, 2)\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Slider, Input, Grid, Typography} from '@material-ui/core';\r\nimport {logToLin} from '../utils';\r\n\r\nexport default class SliderInput extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"slider__container\">\r\n        <Typography id=\"input-slider\" gutterBottom>\r\n          {this.props.label}\r\n        </Typography>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n          <Grid item>{this.props.icon}</Grid>\r\n          <Grid item xs>\r\n            <Slider\r\n              value={logToLin(this.props.value)}\r\n              onChange={(event, newValue) => this.props.sliderChange(event, newValue, this.props.valueName, this.props.name)}\r\n              onChangeCommitted={() => this.props.toggleUpdateData(this.props.name)}\r\n              aria-labelledby=\"input-slider\"\r\n              max={logToLin(this.props.max)}\r\n              className={'slider'}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Input\r\n              className=\"slider__input\"\r\n              value={this.props.value}\r\n              margin=\"dense\"\r\n              onChange={event => this.props.inputChange(event, this.props.valueName, this.props.name)}\r\n              onBlur={() => this.props.handleBlur(this.props.valueName, this.props.max, this.props.name)}\r\n              inputProps={{\r\n                'aria-labelledby': 'input-slider'\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import {Card, CardContent, CardHeader, Collapse, IconButton, Typography} from '@material-ui/core';\r\nimport classNames from 'classnames';\r\nimport {ExpandMore} from '@material-ui/icons';\r\nimport React from 'react';\r\n\r\nexport default function CustomCard(props) {\r\n  const [expanded, setExpanded] = React.useState(props.expanded);\r\n\r\n  function handleExpandClick() {\r\n    setExpanded(!expanded);\r\n  }\r\n  return (\r\n    <Card className={props.className}>\r\n      <CardHeader\r\n        className={'card__header'}\r\n        disableTypography={true}\r\n        title={\r\n          <div className={'card__header__content'}>\r\n            <Typography variant={'h5'} className={'card__header__title'}>\r\n              {props.title}\r\n            </Typography>\r\n            <IconButton\r\n              onClick={handleExpandClick}\r\n              aria-expanded={expanded}\r\n              aria-label=\"show more\"\r\n              className={classNames('card__header__expand', expanded ? 'card__header__expand--open' : '')}\r\n            >\r\n              <ExpandMore />\r\n            </IconButton>\r\n          </div>\r\n        }\r\n        avatar={props.avatar}\r\n      />\r\n      <Collapse in={expanded}>\r\n        <CardContent>{props.children}</CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Grid, Checkbox, FormControlLabel, FormHelperText, FormControl, FormGroup} from '@material-ui/core';\r\nimport SliderInput from './SliderInput';\r\nimport {clip, inputChange, sliderChange, toggleUpdateData, togglePerformanceChart} from '../../actions';\r\nimport {GraphicEq, ScatterPlot, BlurOn, Tune} from '@material-ui/icons';\r\nimport {connect} from 'react-redux';\r\nimport CustomCard from '../CustomCard';\r\n\r\nclass NormalConfig extends React.Component {\r\n  handleBlur = (valueName, max, name) => {\r\n    this.props.clip(max, valueName, name);\r\n    this.props.toggleUpdateData(name);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CustomCard title={'Graph Configuration'} avatar={<Tune />} expanded={true}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <SliderInput\r\n              label={'Mean'}\r\n              name={'normal'}\r\n              valueName={'mean'}\r\n              value={this.props.mean.normal}\r\n              inputChange={this.props.inputChange}\r\n              sliderChange={this.props.sliderChange}\r\n              toggleUpdateData={this.props.toggleUpdateData}\r\n              handleBlur={this.handleBlur}\r\n              max={100000}\r\n              icon={<GraphicEq />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <SliderInput\r\n              label={'Standard Deviation'}\r\n              name={'normal'}\r\n              valueName={'stDev'}\r\n              value={this.props.stDev.normal}\r\n              inputChange={this.props.inputChange}\r\n              sliderChange={this.props.sliderChange}\r\n              toggleUpdateData={this.props.toggleUpdateData}\r\n              handleBlur={this.handleBlur}\r\n              max={1000}\r\n              icon={<BlurOn />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <SliderInput\r\n              label={'Samples'}\r\n              name={'normal'}\r\n              valueName={'samples'}\r\n              value={this.props.samples.normal}\r\n              inputChange={this.props.inputChange}\r\n              sliderChange={this.props.sliderChange}\r\n              toggleUpdateData={this.props.toggleUpdateData}\r\n              handleBlur={this.handleBlur}\r\n              max={1000000}\r\n              icon={<ScatterPlot />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl component=\"fieldset\" className={'stats__performance-chart'}>\r\n              <FormGroup>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox checked={this.props.performanceChart.normal} onChange={() => this.props.togglePerformanceChart('normal')} />\r\n                  }\r\n                  label=\"Performance Chart\"\r\n                />\r\n              </FormGroup>\r\n              <FormHelperText margin=\"dense\">Tick for faster rendering (recommended at high variances)</FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </CustomCard>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    mean: state.mean,\r\n    stDev: state.stDev,\r\n    samples: state.samples,\r\n    performanceChart: state.performanceChart\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  sliderChange,\r\n  inputChange,\r\n  clip,\r\n  toggleUpdateData,\r\n  togglePerformanceChart\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(NormalConfig);\r\n","import {BoxMuller, InverseTransformSampling} from './utils';\r\n\r\n/**\r\n * Function to generate data object to use in amcharts4 charts\r\n * @param samples - how many samples should be displayed\r\n * @param countries - specifies which countries to include if independent is countries\r\n * @param rules - global rules applied to all data:\r\n *        - positive, ensure all data is positive (caps to zero)\r\n * @param slope - value between -0.5 and 0.5, the higher the more upward the graph will slope if isStatic is set to\r\n *                false (higher values will also mean less variance)\r\n * @param isStatic - if set, data will not accumulate\r\n * @param independent - name for the independent variable\r\n *        - date, sets x-axis to be a dateSeries\r\n *        - id, sets x-axis to be a numerical series\r\n *        - countries, sets x-axis to be a category axis with countries specified in the countries parameter (map chart)\r\n * @param dependent - list of dependent variables with properties\r\n *        - name, specifies name of variable\r\n *        - mean, specifies the mean value around which the data should vary\r\n *        - stDev, specifies standard deviation to indicate variance of data\r\n *        - rules, specific rules for this data series:\r\n *                -- positive, ensure all data is positive (caps to zero)\r\n *                -- uniform, applies Math.random() to get uniform distribution\r\n *                -- poisson, generated data using Poisson distribution (mean is the value for lambda)\r\n * @returns {Array}\r\n */\r\nfunction generateChartData({\r\n  samples = 100,\r\n  countries = undefined,\r\n  rules = [],\r\n  slope = 0.1,\r\n  isStatic = true,\r\n  independent = 'id',\r\n  dependent = [\r\n    {\r\n      name: 'column-1',\r\n      mean: 200,\r\n      stDev: 20,\r\n      rules: ['']\r\n    },\r\n    {\r\n      name: 'column-2',\r\n      mean: 50,\r\n      stDev: 5,\r\n      rules: ['']\r\n    }\r\n  ]\r\n} = {}) {\r\n  //Initialising\r\n  let chartData = [];\r\n  let startingDataPoint = {};\r\n  //Sets initial date for data charts\r\n  if (independent === 'date') {\r\n    let firstDate = new Date();\r\n    firstDate.setDate(firstDate.getDate() - samples);\r\n    startingDataPoint['date'] = firstDate;\r\n  }\r\n  //Initialised normal x-axis values\r\n  else if (independent === 'id') {\r\n    startingDataPoint['id'] = 1;\r\n  }\r\n  //Sets up country data for map chart\r\n  else if (independent === 'country') {\r\n    if (countries) {\r\n      startingDataPoint['id'] = countries[0];\r\n    } else {\r\n      throw new Error('Countries parameter needs to be defined');\r\n    }\r\n  }\r\n  //Set initial independent variables\r\n  dependent.forEach((item, index) => {\r\n    startingDataPoint[item.name] = Math.round(\r\n      BoxMuller(item.mean, item.stDev)\r\n    );\r\n  });\r\n  let prevDataPoint = startingDataPoint;\r\n  let newDataPoint = {};\r\n  //Loop through time range or 100 data points if unspecified\r\n  for (let i = 0; i < (countries ? countries.length : samples); i++) {\r\n    newDataPoint = {};\r\n    //Add independent variable\r\n    switch(independent) {\r\n      case 'date':\r\n        let newDate = new Date();\r\n        newDate.setDate(startingDataPoint.date.getDate() + i);\r\n        newDataPoint['date'] = newDate;\r\n        break;\r\n      case 'id':\r\n        newDataPoint['id'] = startingDataPoint.id + i;\r\n        break;\r\n      case 'country':\r\n        newDataPoint['id'] = countries[i];\r\n        break;\r\n      default:\r\n        throw new Error('Independent variable not valid');\r\n    }\r\n    //Add dependent variables\r\n    dependent.forEach((item, index) => {\r\n      if (item.rules.includes('uniform')) {\r\n        newDataPoint[item.name] = Math.round(\r\n          Math.random() * (6 * (item.stDev)) +\r\n          (item.mean - 3 * (item.stDev))\r\n        );\r\n      }\r\n      else if (item.rules.includes('poisson')) {\r\n        newDataPoint[item.name] = Math.round(InverseTransformSampling(item.mean));\r\n      }\r\n      else {\r\n        newDataPoint[item.name] = Math.round(BoxMuller(item.mean, item.stDev));\r\n      }\r\n      if ((rules.includes('positive') || item.rules.includes('positive')) &&\r\n          newDataPoint[item.name] < 0) {\r\n        newDataPoint[item.name] = 0;\r\n      }\r\n      if (!isStatic) {\r\n        newDataPoint[item.name] = prevDataPoint[item.name] +\r\n          Math.round((Math.random() < 0.5 + slope ? 1 : -1) * newDataPoint[item.name]);\r\n        prevDataPoint = newDataPoint;\r\n      }\r\n    });\r\n    chartData.push(newDataPoint);\r\n  }\r\n  return chartData;\r\n}\r\n\r\nexport default generateChartData;\r\n","import React from 'react';\r\nimport * as am4core from '@amcharts/amcharts4/core';\r\nimport * as am4charts from '@amcharts/amcharts4/charts';\r\nimport dark from '@amcharts/amcharts4/themes/dark';\r\nimport animated from '@amcharts/amcharts4/themes/animated';\r\nimport randomDataGenerator from './randomDataGenerator';\r\nimport * as utils from './utils';\r\nimport {connect} from 'react-redux';\r\nimport {toggleUpdateData} from '../actions';\r\nimport CustomCard from './CustomCard';\r\nimport {BarChart} from '@material-ui/icons';\r\n\r\nclass NormalChart extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.chart = null;\r\n    am4core.options.commercialLicense = true;\r\n    this.prevPerf = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createChart();\r\n  }\r\n\r\n  createData() {\r\n    const samples = this.props.samples.normal;\r\n    const mean = this.props.mean.normal;\r\n    const stDev = this.props.stDev.normal;\r\n    let chart_data = randomDataGenerator({\r\n      samples: samples,\r\n      dependent: [\r\n        {\r\n          name: 'column-1',\r\n          mean: mean,\r\n          stDev: stDev,\r\n          rules: []\r\n        },\r\n        {\r\n          name: 'column-3',\r\n          mean: mean,\r\n          stDev: stDev,\r\n          rules: ['uniform']\r\n        }\r\n      ]\r\n    });\r\n    let d = utils.createHistogram(chart_data);\r\n    //Dealing with negatives is not as easy as it may seem\r\n    let positiveData = d[0];\r\n    let positiveKeys =Object.keys(positiveData);\r\n    let negativeData = d[1];\r\n    let negativeKeys = Object.keys(negativeData).sort((a, b) => {\r\n      return Number(a) - Number(b)\r\n    });\r\n    let keys = negativeKeys.concat(positiveKeys);\r\n    let dummy = [];\r\n    let data = [];\r\n    /**\r\n     * Converts to data object that is readable by amcharts and add analytical and CFD functions\r\n     */\r\n    keys.forEach((item, index) => {\r\n      if (Math.sign(Number(item)) === -1) {\r\n        data = negativeData;\r\n      }\r\n      else {\r\n        data = positiveData;\r\n      }\r\n      let dataPoint = {};\r\n      dataPoint['id'] = Number(item);\r\n      dataPoint['column-1'] = data[item]['column-1'];\r\n      dataPoint['column-2'] = Math.round(utils.Gaussian(mean, stDev, parseInt(item, 10)) * samples);\r\n      dataPoint['column-3'] = data[item]['column-3'];\r\n      if (!dummy[0]) {\r\n        dataPoint['column-4'] = dataPoint['column-1'];\r\n      } else {\r\n        dataPoint['column-4'] = dummy[index - 1]['column-4'] + data[item]['column-1'];\r\n      }\r\n      dummy.push(dataPoint);\r\n    });\r\n    let hasZero = false;\r\n    if (negativeKeys.length !== 0) {\r\n      hasZero = true;\r\n    }\r\n    return [dummy, hasZero];\r\n  }\r\n\r\n  createChart() {\r\n    /* Chart code */\r\n    // Themes begin\r\n    am4core.useTheme(dark);\r\n    if (this.props.performanceChart.normal) {\r\n      am4core.unuseTheme(animated);\r\n    } else {\r\n      am4core.useTheme(animated);\r\n    }\r\n    // Themes end\r\n\r\n    // Create chart instance\r\n    this.chart = am4core.create(this.refs.normal_chart, am4charts.XYChart);\r\n    let chart = this.chart;\r\n    chart.categoryField = 'category';\r\n\r\n    // Add data\r\n    let dummy = this.createData();\r\n    chart.data = dummy[0];\r\n    let hasZero = dummy[1];\r\n\r\n    // Create axes\r\n    let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    xAxis.dataFields.category = 'id';\r\n    xAxis.renderer.grid.strokeDasharray = 3;\r\n    // Zero line\r\n    this.range = xAxis.axisRanges.create();\r\n    this.range.category = hasZero ? 0 : undefined;\r\n    this.range.label.paddingTop = 2;\r\n    this.range.label.fontSize = 12;\r\n    this.range.grid.stroke = am4core.color(\"grey\");\r\n    this.range.grid.strokeWidth = 1;\r\n    this.range.grid.strokeOpacity = 0.7;\r\n\r\n    let yAxis1 = chart.yAxes.push(new am4charts.ValueAxis());\r\n    yAxis1.renderer.grid.strokeDasharray = 3;\r\n\r\n    let colorSet = new am4core.ColorSet();\r\n    let yAxis2 = chart.yAxes.push(new am4charts.ValueAxis());\r\n    yAxis2.renderer.grid.template.disabled = true;\r\n    yAxis2.renderer.line.strokeOpacity = 1;\r\n    yAxis2.renderer.line.stroke = colorSet.getIndex(3);\r\n    yAxis2.renderer.line.strokeWidth = 2;\r\n    yAxis2.renderer.opposite = true;\r\n\r\n    // Create series\r\n    let normalBM = chart.series.push(\r\n      this.props.performanceChart.normal ? new am4charts.StepLineSeries() : new am4charts.ColumnSeries()\r\n    );\r\n    normalBM.name = 'Normal (artificial, Box-Muller)';\r\n    normalBM.dataFields.valueY = 'column-1';\r\n    normalBM.dataFields.categoryX = 'id';\r\n    normalBM.strokeWidth = 1;\r\n    normalBM.fillOpacity = 1;\r\n    normalBM.tensionX = 1;\r\n    if (!this.props.performanceChart.normal) {\r\n      normalBM.columns.template.width = am4core.percent(80);\r\n      normalBM.fillOpacity = 0;\r\n    }\r\n\r\n    let normal = chart.series.push(new am4charts.LineSeries());\r\n    normal.name = 'Normal (analytical)';\r\n    normal.dataFields.valueY = 'column-2';\r\n    normal.dataFields.categoryX = 'id';\r\n    normal.strokeWidth = 1;\r\n    normal.tensionX = 1;\r\n\r\n    let uniform = chart.series.push(new am4charts.LineSeries());\r\n    uniform.name = 'Uniform';\r\n    uniform.dataFields.valueY = 'column-3';\r\n    uniform.dataFields.categoryX = 'id';\r\n    uniform.strokeWidth = 1;\r\n    uniform.tensionX = 1;\r\n    uniform.hidden = true;\r\n\r\n    let cfdBM = chart.series.push(new am4charts.LineSeries());\r\n    cfdBM.name = 'CDF (Box-Muller)';\r\n    cfdBM.dataFields.valueY = 'column-4';\r\n    cfdBM.dataFields.categoryX = 'id';\r\n    cfdBM.strokeWidth = 1;\r\n    cfdBM.tensionX = 1;\r\n    cfdBM.yAxis = yAxis2;\r\n\r\n    // Add cursor\r\n    chart.cursor = new am4charts.XYCursor();\r\n\r\n    // Create legend\r\n    chart.legend = new am4charts.Legend();\r\n    let markers = chart.legend.markers.template;\r\n    markers.width = 12;\r\n    markers.height = 12;\r\n    let container = chart.legend.itemContainers.template;\r\n    container.paddingRight = 5;\r\n    container.paddingLeft = 5;\r\n    container.paddingTop = 0;\r\n    container.paddingBottom = 0;\r\n\r\n    // Add padding\r\n    chart.paddingBottom = 20;\r\n    chart.paddingTop = 40;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.updateData.normal) {\r\n      if (this.props.performanceChart.normal && this.prevPerf !== this.props.performanceChart.normal) {\r\n        am4core.options.queue = true;\r\n        am4core.options.minPolylineStep = 5;\r\n        this.prevPerf = !this.prevPerf;\r\n        this.createChart();\r\n      } else if (!this.props.performanceChart.normal && this.prevPerf !== this.props.performanceChart.normal) {\r\n        am4core.options.queue = false;\r\n        am4core.options.minPolylineStep = 0.5;\r\n        this.prevPerf = !this.prevPerf;\r\n        this.createChart();\r\n      } else if (this.props.updateData.normal) {\r\n        // Resets zero line if zero not in view\r\n        let dummy = this.createData();\r\n        this.chart.data = dummy[0];\r\n        let hasZero = dummy[1];\r\n        this.range.category = hasZero ? 0 : undefined;\r\n        this.range.grid.strokeOpacity = hasZero ? 0.7 : 0;\r\n      }\r\n      this.props.toggleUpdateData('normal');\r\n    }\r\n    return (\r\n      <CustomCard title={'Normal Probability Distribution Histograms'} avatar={<BarChart />} expanded={true}>\r\n        <div className={'stats__chart'} ref={'normal_chart'} />\r\n      </CustomCard>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    mean: state.mean,\r\n    stDev: state.stDev,\r\n    samples: state.samples,\r\n    updateData: state.updateData,\r\n    performanceChart: state.performanceChart\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleUpdateData\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(NormalChart);\r\n","import {InlineMath} from 'react-katex';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nexport default function Tag(props) {\r\n  const classes = makeStyles(theme => ({\r\n    tag: {\r\n      position: 'relative',\r\n      right: props.right.toString() + 'vw',\r\n      top: props.top.toString() + 'vh',\r\n      height: 0\r\n    }\r\n  }))();\r\n\r\n  return (\r\n    <div className={classes.tag}><InlineMath>{'(' + props.children + ')'}</InlineMath></div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport NormalConfig from './components/configDashboards/NormalConfig';\r\nimport {Paper, Grid, Typography, Link} from '@material-ui/core';\r\nimport {InlineMath, BlockMath} from 'react-katex';\r\nimport 'katex/dist/katex.min.css';\r\nimport NormalChart from './components/NormalChart';\r\nimport Tag from './components/Tag';\r\n\r\nfunction Normal() {\r\n  return (\r\n    <Grid container spacing={3} className={'stats__grid'}>\r\n      <Grid item xs={12}>\r\n        <Paper className={'stats__text'}>\r\n          <Typography variant={'h4'} align={'center'} gutterBottom={true}>\r\n            Transforming Random Variable Distributions <br /> &nbsp;\r\n          </Typography>\r\n          <Typography variant={'h6'} align={'center'} gutterBottom={true}>\r\n            Normal distributions\r\n          </Typography>\r\n          <Typography>\r\n            This section compares the performance of an artificially created normal distribution from the uniform\r\n            distribution provided by Javascript's <code>Math.random()</code>\r\n            &nbsp;function. In order to achieve this, a method called the&nbsp;\r\n            <Link className={'link'} target=\"_blank\" href={'https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform'}>\r\n              Box-Muller transform\r\n            </Link>\r\n            &nbsp; was used. If we have two uniformly distributed random variables\r\n            <InlineMath>{'U_1'}</InlineMath> and <InlineMath>{'U_2'}</InlineMath>, then:\r\n            <BlockMath>{'Z_0 = R \\\\cos{(\\\\Theta)}'}</BlockMath>\r\n            <BlockMath>{'Z_1 = R \\\\sin{(\\\\Theta)}'}</BlockMath>\r\n            where <InlineMath>{'Z_0'}</InlineMath> and <InlineMath>{'Z_1'}</InlineMath> are normally distributed\r\n            random variables and\r\n            <BlockMath>{'R^2 = -2 \\\\ln{U_1}'}</BlockMath>\r\n            <BlockMath>{'\\\\Theta = 2\\\\pi U_2'}</BlockMath>\r\n            this leads to the final two equations:\r\n            <BlockMath>{'Z_0 = \\\\sqrt{-2\\\\ln{U_1}} \\\\cos{(2\\\\pi U_2)}'}</BlockMath>\r\n            <Tag right={-80} top={-4}>1</Tag>\r\n            <BlockMath>{'Z_1 = \\\\sqrt{-2\\\\ln{U_1}} \\\\sin{(2\\\\pi U_2)}'}</BlockMath>\r\n            <Tag right={-80} top={-4}>2</Tag>\r\n            In the graph below, we can see its performance in a histogram compared to the analytic\r\n            function of the normal distribution:\r\n            <BlockMath>\r\n              {'\\\\large{\\\\mathcal{N}(x \\\\hspace{2pt} ; \\\\hspace{2pt} \\\\mu,\\\\sigma) =' +\r\n              ' \\\\frac{1}{\\\\sqrt{2\\\\pi\\\\sigma^2}}e^{-\\\\frac{(x-\\\\mu)^2}{2\\\\sigma^2}}}'}\r\n            </BlockMath>\r\n            There is also an option to show the source of the random variable by ticking the 'Uniform' legend which\r\n            will show raw output from <code>Math.random()</code>\r\n            . The CDF of our transformed distribution is also shown to further our comparison.\r\n            <br />\r\n            Below the graph, there is a panel that allows you to change the three parameters that define the graph:\r\n            the mean, variance and number of samples.\r\n          </Typography>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <NormalChart />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <NormalConfig />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Normal;\r\n","import React from 'react';\r\nimport {Grid, Checkbox, FormControlLabel, FormHelperText, FormControl, FormGroup} from '@material-ui/core';\r\nimport SliderInput from './SliderInput';\r\nimport {clip, inputChange, sliderChange, toggleUpdateData, togglePerformanceChart} from '../../actions';\r\nimport {GraphicEq, ScatterPlot, Tune} from '@material-ui/icons';\r\nimport {connect} from 'react-redux';\r\nimport CustomCard from '../CustomCard';\r\n\r\nclass PoissonConfig extends React.Component {\r\n  handleBlur = (valueName, max, name) => {\r\n    this.props.clip(max, valueName, name);\r\n    this.props.toggleUpdateData(name);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CustomCard title={'Graph Configuration'} avatar={<Tune />} expanded={true}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <SliderInput\r\n              label={'Lambda'}\r\n              name={'poisson'}\r\n              valueName={'lambda'}\r\n              value={this.props.lambda.poisson}\r\n              inputChange={this.props.inputChange}\r\n              sliderChange={this.props.sliderChange}\r\n              toggleUpdateData={this.props.toggleUpdateData}\r\n              handleBlur={this.handleBlur}\r\n              max={745}\r\n              icon={<GraphicEq />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <SliderInput\r\n              label={'Samples'}\r\n              name={'poisson'}\r\n              valueName={'samples'}\r\n              value={this.props.samples.poisson}\r\n              inputChange={this.props.inputChange}\r\n              sliderChange={this.props.sliderChange}\r\n              toggleUpdateData={this.props.toggleUpdateData}\r\n              handleBlur={this.handleBlur}\r\n              max={1000000}\r\n              icon={<ScatterPlot />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <FormControl component=\"fieldset\" className={'stats__performance-chart'}>\r\n              <FormGroup>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox checked={this.props.performanceChart.poisson} onChange={() => this.props.togglePerformanceChart('poisson')} />\r\n                  }\r\n                  label=\"Performance Chart\"\r\n                />\r\n              </FormGroup>\r\n              <FormHelperText margin=\"dense\">Tick for faster rendering (recommended at high variances)</FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </CustomCard>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    lambda: state.lambda,\r\n    samples: state.samples,\r\n    performanceChart: state.performanceChart\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  sliderChange,\r\n  inputChange,\r\n  clip,\r\n  toggleUpdateData,\r\n  togglePerformanceChart\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PoissonConfig);\r\n","import React from 'react';\r\nimport * as am4core from '@amcharts/amcharts4/core';\r\nimport * as am4charts from '@amcharts/amcharts4/charts';\r\nimport dark from '@amcharts/amcharts4/themes/dark';\r\nimport animated from '@amcharts/amcharts4/themes/animated';\r\nimport randomDataGenerator from './randomDataGenerator';\r\nimport * as utils from './utils';\r\nimport {connect} from 'react-redux';\r\nimport {toggleUpdateData} from '../actions';\r\nimport CustomCard from './CustomCard';\r\nimport {BarChart} from '@material-ui/icons';\r\n\r\nclass PoissonChart extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.chart = null;\r\n    am4core.options.commercialLicense = true;\r\n    this.prevPerf = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createChart();\r\n  }\r\n\r\n  createData() {\r\n    const lambda = this.props.lambda.poisson;\r\n    const samples = this.props.samples.poisson;\r\n    let chart_data = randomDataGenerator({\r\n      samples: samples,\r\n      dependent: [\r\n        {\r\n          name: 'column-1',\r\n          mean: lambda,\r\n          rules: ['poisson', 'positive']\r\n        }\r\n      ]\r\n    });\r\n    let d = utils.createHistogram(chart_data);\r\n    //Dealing with negatives is not as easy as it may seem\r\n    let positiveData = d[0];\r\n    let positiveKeys =Object.keys(positiveData);\r\n    let negativeData = d[1];\r\n    let negativeKeys = Object.keys(negativeData).sort((a, b) => {\r\n      return Number(a) - Number(b)\r\n    });\r\n    let keys = negativeKeys.concat(positiveKeys);\r\n    let dummy = [];\r\n    let data = [];\r\n    /**\r\n     * Converts to data object that is readable by amcharts and add analytical and CFD functions\r\n     */\r\n    keys.forEach((item, index) => {\r\n      if (Math.sign(Number(item)) === -1) {\r\n        data = negativeData;\r\n      }\r\n      else {\r\n        data = positiveData;\r\n      }\r\n      let dataPoint = {};\r\n      dataPoint['id'] = Number(item);\r\n      dataPoint['column-1'] = data[item]['column-1'];\r\n      dataPoint['column-2'] = Math.round(utils.Poisson(lambda, parseInt(item, 10)) * samples);\r\n      if (!dummy[0]) {\r\n        dataPoint['column-4'] = dataPoint['column-2'];\r\n      } else {\r\n        dataPoint['column-4'] = dummy[index - 1]['column-4'] + dataPoint['column-2'];\r\n      }\r\n      dummy.push(dataPoint);\r\n    });\r\n    let hasZero = false;\r\n    if (negativeKeys.length !== 0) {\r\n      hasZero = true;\r\n    }\r\n    return [dummy, hasZero];\r\n  }\r\n\r\n  createChart() {\r\n    /* Chart code */\r\n    // Themes begin\r\n    am4core.useTheme(dark);\r\n    if (this.props.performanceChart.poisson) {\r\n      am4core.unuseTheme(animated);\r\n    } else {\r\n      am4core.useTheme(animated);\r\n    }\r\n    // Themes end\r\n\r\n    // Create chart instance\r\n    this.chart = am4core.create(this.refs.poisson_chart, am4charts.XYChart);\r\n    let chart = this.chart;\r\n    chart.categoryField = 'category';\r\n\r\n    // Add data\r\n    let dummy = this.createData();\r\n    chart.data = dummy[0];\r\n    let hasZero = dummy[1];\r\n\r\n    // Create axes\r\n    let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    xAxis.id = 'xAxis';\r\n    xAxis.dataFields.category = 'id';\r\n    xAxis.renderer.grid.strokeDasharray = 3;\r\n    // Zero line\r\n    this.range = xAxis.axisRanges.create();\r\n    this.range.category = hasZero ? 0 : undefined;\r\n    this.range.label.paddingTop = 2;\r\n    this.range.label.fontSize = 12;\r\n    this.range.grid.stroke = am4core.color(\"grey\");\r\n    this.range.grid.strokeWidth = 1;\r\n    this.range.grid.strokeOpacity = 0.7;\r\n    let yAxis1 = chart.yAxes.push(new am4charts.ValueAxis());\r\n    yAxis1.renderer.grid.strokeDasharray = 3;\r\n\r\n    let colorSet = new am4core.ColorSet();\r\n    let yAxis2 = chart.yAxes.push(new am4charts.ValueAxis());\r\n    yAxis2.renderer.grid.template.disabled = true;\r\n    yAxis2.renderer.line.strokeOpacity = 1;\r\n    yAxis2.renderer.line.stroke = colorSet.getIndex(3);\r\n    yAxis2.renderer.line.strokeWidth = 2;\r\n    yAxis2.renderer.opposite = true;\r\n\r\n    // Create series\r\n    let poissonITS = chart.series.push(\r\n      this.props.performanceChart.poisson ? new am4charts.StepLineSeries() : new am4charts.ColumnSeries()\r\n    );\r\n    poissonITS.name = 'Poisson (inverse transform sampling)';\r\n    poissonITS.dataFields.valueY = 'column-1';\r\n    poissonITS.dataFields.categoryX = 'id';\r\n    poissonITS.strokeWidth = 1;\r\n    poissonITS.fillOpacity = 1;\r\n    poissonITS.tensionX = 1;\r\n    if (!this.props.performanceChart.poisson) {\r\n      poissonITS.columns.template.width = am4core.percent(80);\r\n      poissonITS.fillOpacity = 0;\r\n    }\r\n\r\n    let poisson = chart.series.push(new am4charts.LineSeries());\r\n    poisson.name = 'Poisson (analytical)';\r\n    poisson.dataFields.valueY = 'column-2';\r\n    poisson.dataFields.categoryX = 'id';\r\n    poisson.strokeWidth = 1;\r\n    poisson.tensionX = 1;\r\n\r\n    let cfd = chart.series.push(new am4charts.LineSeries());\r\n    cfd.name = 'CDF (analytical)';\r\n    cfd.dataFields.valueY = 'column-4';\r\n    cfd.dataFields.categoryX = 'id';\r\n    cfd.strokeWidth = 1;\r\n    cfd.tensionX = 1;\r\n    cfd.yAxis = yAxis2;\r\n\r\n    // Add cursor\r\n    chart.cursor = new am4charts.XYCursor();\r\n\r\n    // Create legend\r\n    chart.legend = new am4charts.Legend();\r\n    let markers = chart.legend.markers.template;\r\n    markers.width = 12;\r\n    markers.height = 12;\r\n    let container = chart.legend.itemContainers.template;\r\n    container.paddingRight = 5;\r\n    container.paddingLeft = 5;\r\n    container.paddingTop = 0;\r\n    container.paddingBottom = 0;\r\n\r\n    // Add padding\r\n    chart.paddingBottom = 20;\r\n    chart.paddingTop = 40;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.updateData.poisson) {\r\n      if (this.props.performanceChart.poisson && this.prevPerf !== this.props.performanceChart.poisson) {\r\n        am4core.options.queue = true;\r\n        am4core.options.minPolylineStep = 5;\r\n        this.prevPerf = !this.prevPerf;\r\n        this.createChart();\r\n      } else if (!this.props.performanceChart.poisson && this.prevPerf !== this.props.performanceChart.poisson) {\r\n        am4core.options.queue = false;\r\n        am4core.options.minPolylineStep = 0.5;\r\n        this.prevPerf = !this.prevPerf;\r\n        this.createChart();\r\n      } else if (this.props.updateData.poisson) {\r\n        // Resets zero line if zero not in view\r\n        let dummy = this.createData();\r\n        this.chart.data = dummy[0];\r\n        let hasZero = dummy[1];\r\n        this.range.category = hasZero ? 0 : undefined;\r\n        this.range.grid.strokeOpacity = hasZero ? 0.7 : 0;\r\n      }\r\n      this.props.toggleUpdateData('poisson');\r\n    }\r\n    return (\r\n      <CustomCard title={'Poisson Probability Distribution Histograms'} avatar={<BarChart />} expanded={true}>\r\n        <div className={'stats__chart'} ref={'poisson_chart'} />\r\n      </CustomCard>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    lambda: state.lambda,\r\n    samples: state.samples,\r\n    updateData: state.updateData,\r\n    performanceChart: state.performanceChart\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  toggleUpdateData\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PoissonChart);\r\n","import React from 'react';\r\nimport PoissonConfig from './components/configDashboards/PoissonConfig';\r\nimport {Paper, Grid, Typography, Link} from '@material-ui/core';\r\nimport {InlineMath, BlockMath} from 'react-katex';\r\nimport 'katex/dist/katex.min.css';\r\nimport PoissonChart from './components/PoissonChart';\r\nimport Tag from './components/Tag';\r\n\r\nfunction Poisson() {\r\n  return (\r\n    <Grid container spacing={3} className={'stats__grid'}>\r\n      <Grid item xs={12}>\r\n        <Paper className={'stats__text'}>\r\n          <Typography variant={'h4'} align={'center'} gutterBottom={true}>\r\n            Transforming Random Variable Distributions <br /> &nbsp;\r\n          </Typography>\r\n          <Typography variant={'h6'} align={'center'} gutterBottom={true}>\r\n            Poisson distributions\r\n          </Typography>\r\n          <Typography>\r\n            We now turn to the Poisson distribution, another very prominent distribution that describes random events\r\n            happening at a constant rate independently of time. The analytic function is:\r\n            <BlockMath>\r\n              {'\\\\large{\\\\text{Po}(x\\\\hspace{2pt} ; \\\\hspace{2pt} \\\\lambda) = \\\\frac{\\\\lambda^x}{x!}e^{-\\\\lambda}}'}\r\n            </BlockMath>\r\n            To transform our uniform distribution to a Poisson one, we can use the Knuth algorithm or we can use\r\n            inverse transform sampling to obtain a practical estimate to the analytic distribution (\r\n            <Link className={'link'} target=\"_blank\" href={'https://en.wikipedia.org/wiki/Poisson_distribution#Generating_Poisson-distributed_random_variables'}>\r\n              source\r\n            </Link>). Since the Knuth algorithm can have underflow errors at high <InlineMath>{'\\\\lambda'}</InlineMath>\r\n            &nbsp; due to the very small <InlineMath>{'e^{\\\\lambda}'}</InlineMath>, another algorithm is also used that\r\n            uses a smallest value of <InlineMath>{'e^{-\\\\lambda}'}</InlineMath> using a separate parameter &nbsp;\r\n            <InlineMath>{'{\\\\footnotesize{\\\\text{STEP}}}'}</InlineMath>.\r\n          </Typography>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <PoissonChart />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <PoissonConfig />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Poisson;\r\n","import React from 'react';\r\nimport CustomCard from '../components/CustomCard';\r\nimport 'katex/dist/katex.min.css';\r\nimport {InlineMath, BlockMath} from 'react-katex';\r\nimport {Subject, Code} from '@material-ui/icons';\r\nimport {CardMedia, Grid, Paper, Typography} from '@material-ui/core';\r\nimport abc from '../images/abc.svg';\r\nimport fano_window from '../images/fano_window.svg';\r\nimport isi_hist from '../images/isi_hist.svg';\r\nimport Highlight from 'react-highlight.js';\r\nimport fano from '../images/fano.svg';\r\nimport cv from '../images/cv.svg';\r\nimport spike_train_bw from '../images/spike_train_bw.svg';\r\nimport spike_train_refr from '../images/spike_train_refr.svg';\r\nimport isi_refr from '../images/isi_refr.svg';\r\nimport cv_refr from '../images/cv_refr.svg';\r\nimport isis_refr from '../images/isis_refr.svg';\r\nimport fano_window_refr from '../images/fano_window_refr.svg';\r\n\r\nexport default class Chapter1 extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid container spacing={3} className={'stats__grid'}>\r\n        <Grid item xs={12}>\r\n          <Paper className={'stats__text'}>\r\n            <Typography variant={'h4'} align={'center'} gutterBottom={true}>\r\n              Chapter 1: Neural Encoding I <br /> &nbsp;\r\n            </Typography>\r\n            <CustomCard title={'Question 1'} avatar={<Subject />} expanded={false}>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid key={0} item className={'neur__questions__gridL'}>\r\n                  <Typography>\r\n                    <i>Generate spikes for 10 s (or longer if you want better statistics) using\r\n                    a Poisson spike generator with a constant rate of 100 Hz, and record\r\n                      their times of occurrence.</i>\r\n                    <br/><br/>\r\n                    Estimated probability of firing a spike during a short interval of duration &nbsp;\r\n                    <InlineMath>{'\\\\Delta t'}</InlineMath> is <InlineMath>{'\\\\text{r}_{\\\\text{est}}(t)\\\\Delta t'}</InlineMath>\r\n                    &nbsp; where&nbsp;  <InlineMath>{'\\\\text{r}_{\\\\text{est}}(t)'}</InlineMath>\r\n                    &nbsp; is the estimate of the firing rate predicted from knowledge of the stimulus\r\n                    (we will assume it is some constant in this first section). The normal way to generate a spike train\r\n                    for this rate is to generate a uniform random number&nbsp;\r\n                    <InlineMath>{'x_{\\\\text{rand}}'}</InlineMath> &nbsp; between 0 and 1 at each time step and if &nbsp;\r\n                    <InlineMath>{'\\\\text{r}_{\\\\text{est}}(t)\\\\Delta t > x_{\\\\text{rand}}'}</InlineMath>\r\n                    &nbsp; then a spike is fired in the time step.\r\n                    <br/><br/>\r\n                    For constant spike rates, we can compute the spike times by using the following iterative formula:\r\n                    <BlockMath>\r\n                      {'t_{i+1}=t_i-\\\\frac{\\\\ln(x_{\\\\text{rand}})}{\\\\text{r}}'}\r\n                    </BlockMath>\r\n                    where &nbsp;<InlineMath>{'\\\\bf{t}'}</InlineMath>&nbsp;  is a vector of the spike times.\r\n                    The ISI (interspike intervals) can be computed in one\r\n                    step by taking a vector of random numbers and applying the negative log with the division by\r\n                    &nbsp;<InlineMath>{'\\\\text{r}'}</InlineMath>&nbsp;\r\n                    at once providing a computationally more efficient method. The quantitative comparisons may be found\r\n                    in the extensions section. To record the times of spike occurrence, we use a raster plot and\r\n                    repeat for a number of trials.\r\n                  </Typography>\r\n                  <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                    <Highlight language={'python'}>\r\n                      {'def homogeneous_poisson(r, T, n=1, oversample=True):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Generates a homogeneous Poisson spike train of rate r (Hz) and duration T (s) using the vector method\\n' +\r\n                      '    :param r: rate\\n' +\r\n                      '    :param T: duration\\n' +\r\n                      '    :param oversample: whether to include extra samples to make duration equal to T\\n' +\r\n                      '    :param n: set number of trials. 1 will return a numpy array, anything larger will return a list of numpy arrays\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if n != 1:      # Use recursion to sample multiple trials\\n' +\r\n                      '        return [homogeneous_poisson(r, T, n=1, oversample=oversample) for i in range(n)]\\n' +\r\n                      '    \\n' +\r\n                      '    if oversample:\\n' +\r\n                      '        isi = - np.log(np.random.rand(int((r * T) + 3 * np.sqrt(r*T)))) / r  # Oversample by 3 standard deviations\\n' +\r\n                      '        t = to_spike_times(isi)     \\n' +\r\n                      '        t = t[t<=T]     # Remove spikes that occur after time limit\\n' +\r\n                      '    else:\\n' +\r\n                      '        isi = - np.log(np.random.rand(r * T)) / r  # Approximately r*T spikes per trial\\n' +\r\n                      '        t = to_spike_times(isi)     \\n' +\r\n                      '    return t\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def homogeneous_poisson_iterative(r, T, n=1):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Generates a homogeneous Poisson spike train of rate r (Hz) and duration T (s) using the iterative formula\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if n != 1:      # Use recursion to sample multiple trials\\n' +\r\n                      '        return [homogeneous_poisson_iterative(r, T, n=1) for i in range(n)]\\n' +\r\n                      '    \\n' +\r\n                      '    t = [-np.log(np.random.rand())/r]\\n' +\r\n                      '    while True:\\n' +\r\n                      '        t.append(t[-1] - np.log(np.random.rand())/r)\\n' +\r\n                      '        if t[-1] > T:   # This is python\\'s version of a do-while loop\\n' +\r\n                      '            t = t[:-1]\\n' +\r\n                      '            break\\n' +\r\n                      '    return np.array(t)\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def to_isi(t, join=False):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Converts spike times to ISI\\n' +\r\n                      '    join parameter allows return of numpy vector containing isi from all trials joined together\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if type(t) == list:     # case of multiple trials\\n' +\r\n                      '        isi = [i[1:] - i[:-1].copy() for i in t]\\n' +\r\n                      '        if join:\\n' +\r\n                      '            return np.array(list(itertools.chain(*isi)))\\n' +\r\n                      '        else:\\n' +\r\n                      '            return isi\\n' +\r\n                      '    else:                   # case of single trial\\n' +\r\n                      '        isi = t.copy()\\n' +\r\n                      '        isi[1:] -= isi[:-1].copy()  # inverse of cumsum\\n' +\r\n                      '        return isi  \\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def to_spike_times(isi):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Converts ISI to spike times\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if type(isi) == list:   # case of multiple trials\\n' +\r\n                      '        return np.cumsum(isi, axis=1)\\n' +\r\n                      '    else:                   # case of single trial\\n' +\r\n                      '        return np.cumsum(isi)' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def plot_spikes(t, T=np.inf):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Raster plot for one or more spike trains\\n' +\r\n                      '    :param t: spike times\\n' +\r\n                      '    :param T: integer for cropping to a set duration (default set to infinity for no cropping)\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if type(t) == list:\\n' +\r\n                      '        n = len(t)\\n' +\r\n                      '        t = [t[i][t[i]<=T] for i in range(n)]\\n' +\r\n                      '        line_size = [0.6 for i in range(n)]\\n' +\r\n                      '        colours = [\\'C{}\\'.format(i) for i in range(n)]\\n' +\r\n                      '        plt.eventplot(t, linelengths=line_size, colors=colours)\\n' +\r\n                      '    elif t.ndim == 1:\\n' +\r\n                      '        t = t[t<=T]\\n' +\r\n                      '        plt.eventplot(t, linelengths=0.6, color=plt.rcParams[\\'axes.prop_cycle\\'].by_key()[\\'color\\'][0])\\n' +\r\n                      '    plt.title(\\'Spike trains\\')\\n' +\r\n                      '    plt.xlabel(\\'Time (s)\\')\\n' +\r\n                      '    plt.ylabel(\\'Spike occurrence\\')\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      't = homogeneous_poisson(100, 10, n=10)\\n' +\r\n                      'plot_spikes(t, T=0.5)'}\r\n                    </Highlight>\r\n                  </CustomCard>\r\n                </Grid>\r\n                <Grid key={1} item className={'neur__questions__gridR'}>\r\n                  <Grid container spacing={0} justify='center'>\r\n                    <Grid key={0} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={abc} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                    <Grid key={1} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={spike_train_bw} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <hr className={'neur__hr'}/>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid key={0} item className={'neur__questions__gridL'}>\r\n                  <Typography>\r\n                    <i>Compute the coefficient of variation of the interspike intervals, and the Fano factor for spike counts obtained\r\n                      over counting intervals ranging from 1 to 100 ms. Plot the interspike interval histogram.</i>\r\n                    <br/>\r\n                    The coefficient of variation is defined as:\r\n                    <BlockMath>{'C_V=\\\\frac{\\\\sigma_{\\\\tau}}{\\\\langle\\\\tau\\\\rangle}'}</BlockMath>\r\n                    where\r\n                    <BlockMath>\r\n                      {'\\\\begin{aligned}\\n' +\r\n                      '\\\\langle\\\\tau\\\\rangle &= \\\\int^{\\\\infty}_0 \\\\tau \\\\text{p}_{\\\\tau}[\\\\tau] \\\\text{d}\\\\tau = \\\\frac{1}{\\\\text{r}}\\\\\\\\\\n' +\r\n                      '\\\\sigma_{\\\\tau}^2 &= \\\\int^{\\\\infty}_0\\\\tau^2\\\\text{p}_{\\\\tau}[\\\\tau] \\\\text{d}\\\\tau - \\\\langle\\\\tau\\\\rangle^2 = \\\\frac{1}{\\\\text{r}^2}\\n' +\r\n                      '\\\\end{aligned}'}\r\n                    </BlockMath>\r\n                    using the fact that ISI (represented by <InlineMath>{'\\\\tau'}</InlineMath>) are distributed according to an exponential distribution (explanation for this in extensions section).\r\n                    <br/><br/>\r\n                    The Fano factor is defined as:\r\n                    <BlockMath>{'F = \\\\frac{\\\\sigma_n^2}{\\\\langle n\\\\rangle}'}</BlockMath>\r\n                    where\r\n                    <BlockMath>\r\n                      {'\\\\begin{aligned}\\n' +\r\n                      '\\\\langle n\\\\rangle &= \\\\sum^{\\\\infty}_{n=0} n\\\\text{P}_{N}[n] = \\\\text{r}T\\\\\\\\\\n' +\r\n                      '\\\\sigma_n^2 &= \\\\Big(\\\\sum^{\\\\infty}_{n=0}n^2\\\\text{P}_{N}[n]\\\\Big) - \\\\langle n\\\\rangle^2 = \\\\text{r}T\\n' +\r\n                      '\\\\end{aligned}'}\r\n                    </BlockMath>\r\n                    using the fact that spike times (represented by <InlineMath>{'n'}</InlineMath>) are distributed according to a Poisson distribution (explanation for this in extensions section).\r\n                    <br/><br/>\r\n                    The theoretical values of both of these metrics are 1 for a homogeneous Poisson process independent of <InlineMath>{'T'}</InlineMath>.\r\n                    <br/>\r\n                    We can confirm these values by plotting the mean and variance against each other. We should see that these points lie on the x=y line.\r\n                  </Typography>\r\n                  <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                    <Highlight language={'python'}>\r\n                      {'def fano_factor(t, window, end, start=0, return_value=True):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Computes the Fano factor\\n' +\r\n                      '    :param t: spike times\\n' +\r\n                      '    :param start: start time of sampling (if the whole spike train is not to be taken account for)\\n' +\r\n                      '    :param end: end time of sampling     (if the whole spike train is to be considered, enter the duration of the spike train here)\\n' +\r\n                      '    :param window: window size for averaging ()\\n' +\r\n                      '    :param return_value: set to False if the individual values of the variance and mean are required\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if type(t) == list:\\n' +\r\n                      '        n = np.array([]) if return_value else np.array([[None, None]])\\n' +\r\n                      '        for trial in t:\\n' +\r\n                      '                if return_value:\\n' +\r\n                      '                    n = np.concatenate((n, fano_factor(trial, window, end, start=start, return_value=\\'recurse\\')))\\n' +\r\n                      '                else:\\n' +\r\n                      '                    n = np.concatenate((n, np.array([fano_factor(trial, window, end, start=start, return_value=False)])))\\n' +\r\n                      '    else:\\n' +\r\n                      '        n = bin_spikes(t, window, start, end)[0]\\n' +\r\n                      '\\n' +\r\n                      '    if return_value == \\'recurse\\':\\n' +\r\n                      '        return n\\n' +\r\n                      '    elif return_value:\\n' +\r\n                      '        return np.var(n) / np.mean(n)\\n' +\r\n                      '    else:\\n' +\r\n                      '        if type(t) == list:\\n' +\r\n                      '            return n[1:].T\\n' +\r\n                      '        else:\\n' +\r\n                      '            return np.var(n), np.mean(n)\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def coefficient_variation(t, return_value=True):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Computes the coefficient of variation of a given spike train\\n' +\r\n                      '    If return_value is set to false, will return the variance and mean as a tuple\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if type(t) == list:\\n' +\r\n                      '        isi = np.array([]) if return_value else np.array([[None, None]])\\n' +\r\n                      '        for trial in t:\\n' +\r\n                      '                if return_value:\\n' +\r\n                      '                    isi = np.concatenate((isi, coefficient_variation(trial, return_value=\\'recurse\\')))\\n' +\r\n                      '                else:\\n' +\r\n                      '                    isi = np.concatenate((isi, np.array([coefficient_variation(trial, return_value=False)])))\\n' +\r\n                      '    else:\\n' +\r\n                      '        isi = to_isi(t)\\n' +\r\n                      '\\n' +\r\n                      '    if return_value == \\'recurse\\':\\n' +\r\n                      '        return isi\\n' +\r\n                      '    elif return_value:\\n' +\r\n                      '        return np.std(isi) / np.mean(isi)\\n' +\r\n                      '    else:\\n' +\r\n                      '        if type(t) == list:\\n' +\r\n                      '            return isi[1:].T\\n' +\r\n                      '        else:\\n' +\r\n                      '            return np.std(isi), np.mean(isi)\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def bin_spikes(t, window, start, end):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Returns histogram counts of the spikes from start to end (in seconds) in with a bin width of window\\n' +\r\n                      '    Discards some of the last data if the interval does not divide exactly into window\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    cropped_end = end - (end - start) % window                      # Makes sure that the specified interval divides into bins of duration window\\n' +\r\n                      '    number_bins = int((cropped_end - start) / window)\\n' +\r\n                      '    bins = np.linspace(start, cropped_end, number_bins+1)           # Acts like np.arange but including the last element (more stable with floats)\\n' +\r\n                      '    return np.histogram(t, bins)                                    # number of spikes in each bin\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def plot_interval_hist(t, c=0, fill=False, alpha=1, label=None, line_plot=False, density=False, extra_title=\\'\\'):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Plots a histogram of the ISI (c sets colour index)\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    isi = to_isi(t, join=True)\\n' +\r\n                      '    plt.hist(isi*1000, bins=50, fill=fill,\\n' +\r\n                      '             edgecolor=plt.rcParams[\\'axes.prop_cycle\\'].by_key()[\\'color\\'][c],\\n' +\r\n                      '             facecolor=plt.rcParams[\\'axes.prop_cycle\\'].by_key()[\\'color\\'][c], alpha=alpha, label=label, density=density)\\n' +\r\n                      '    if line_plot:\\n' +\r\n                      '        plt.plot(np.histogram(isi, bins=50)[1][:-1]*1000, np.histogram(isi, bins=50)[0], color=plt.rcParams[\\'axes.prop_cycle\\'].by_key()[\\'color\\'][c])\\n' +\r\n                      '    plt.title(\\'Interspike interval histogram\\' + extra_title)\\n' +\r\n                      '    plt.xlabel(\\'Interval (ms)\\')\\n' +\r\n                      '    plt.ylabel(\\'Histogram count\\')' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def diagonal_fit_plot(x):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Takes in a tuple of (x, y) data and plots it against a x=y diagonal\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    plt.scatter(x[0], x[1], marker=\\'.\\', color=\\'gray\\', label=\\'data\\')\\n' +\r\n                      '    plt.plot([x.min(), x.max()], [x.min(), x.max()], color=\\'red\\', label=\\'fit\\')\\n' +\r\n                      '    plt.legend()\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def join_lists(x):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Used for running multiple trial sets with different hyperparameters\\n' +\r\n                      '    Joins the lists of numpy arrays into one large list of numpy arrays\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    return list(itertools.chain(*x))' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      't = homogeneous_poisson(100, 50, 10)\\n' +\r\n                      'windows = np.linspace(1, 100, 100) / 1000\\n' +\r\n                      'F = [fano_factor(t, i, 50) for i in windows]\\n' +\r\n                      'plt.scatter(1000*windows, F)\\n' +\r\n                      'plt.xlabel(\\'Window size (ms)\\')\\n' +\r\n                      'plt.ylabel(\\'Fano factor\\')\\n' +\r\n                      'plt.title(\\'Fano factor for different window sizes\\')\\n' +\r\n                      'plt.show()\\n' +\r\n                      '\\n' +\r\n                      'Cv = coefficient_variation(t)\\n' +\r\n                      'print(\\'Coefficient of variation: \\' + str(Cv))\\n' +\r\n                      '\\n' +\r\n                      'plot_interval_hist(t)\\n' +\r\n                      'plt.show()' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'rates = np.linspace(10, 100, 91, dtype=int)\\n' +\r\n                      't = join_lists([homogeneous_poisson(i, 10, 50) for i in rates])\\n' +\r\n                      'F = fano_factor(t, 1e-3, 10, return_value=False)\\n' +\r\n                      'diagonal_fit_plot(F)\\n' +\r\n                      'plt.xlabel(\\'Spike Count Variance\\')\\n' +\r\n                      'plt.ylabel(\\'Spike Count Mean\\')\\n' +\r\n                      'plt.title(\\'Fano factor\\')\\n' +\r\n                      'plt.show()\\n' +\r\n                      '\\n' +\r\n                      'Cv = coefficient_variation(t, return_value=False)\\n' +\r\n                      'diagonal_fit_plot(Cv)\\n' +\r\n                      'plt.xlabel(\\'Interval Standard Deviation\\')\\n' +\r\n                      'plt.ylabel(\\'Interval Mean\\')\\n' +\r\n                      'plt.title(\\'Coefficient of variation\\')\\n' +\r\n                      'plt.show()'}\r\n                    </Highlight>\r\n                  </CustomCard>\r\n                </Grid>\r\n                <Grid key={1} item className={'neur__questions__gridR'}>\r\n                  <Grid container spacing={0} justify='center'>\r\n                    <Grid key={0} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={fano_window} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                    <Grid key={1} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={isi_hist} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container spacing={0} justify='center'>\r\n                    <Grid key={0} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={fano} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                    <Grid key={1} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={cv} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </CustomCard>\r\n            <CustomCard title={'Question 2'} avatar={<Subject />} expanded={false}>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid key={0} item className={'neur__questions__gridL'}>\r\n                  <Typography>\r\n                    <i>Add a refractory period to the Poisson spike generator by allowing\r\n                      the firing rate to depend on time. Initially, set the firing rate to a\r\n                      constant value, <InlineMath>{'\\\\text{r}(t) = \\\\text{r}_0'}</InlineMath>. After every spike, set\r\n                      &nbsp;<InlineMath>{'\\\\text{r}(t)'}</InlineMath> to 0, and then allow it to recover exponentially back\r\n                      to <InlineMath>{'\\\\text{r}_0'}</InlineMath> with a time constant\r\n                      &nbsp;<InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath> that controls the refractory recovery rate. In\r\n                      other words, have <InlineMath>{'\\\\text{r}(t)'}</InlineMath> obey the equation\r\n                      <BlockMath>\r\n                        {'\\\\tau_{\\\\text{ref}}\\\\frac{\\\\text{dr}}{\\\\text{d}t}=\\\\text{r}_0-\\\\text{r}'}\r\n                      </BlockMath>\r\n                      except immediately after a spike, when it is set to 0.</i><br /><br />\r\n                    Solving this ODE with an initial condition of zero at t=0, we get the following:\r\n                    <BlockMath>{'\\\\text{r}(t) = \\\\text{r}_0(1-e^{-\\\\frac{t}{\\\\tau_{\\\\text{ref}}}})'}</BlockMath>\r\n                    The way we will implement this is through rejection sampling. We will first take a spike train formed by the homogeneous\r\n                    Poisson process and then for each spike, reject it if\r\n                    &nbsp;<InlineMath>{'\\\\frac{\\\\text{r}(t_i)}{\\\\text{r}_0} < x_{\\\\text{rand}}'}</InlineMath> where\r\n                    &nbsp;<InlineMath>{'x_{\\\\text{rand}}'}</InlineMath> is a random uniform variable as before and <InlineMath>{'t_i'}</InlineMath> are the spike times.\r\n                  </Typography>\r\n                  <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                    <Highlight language={'python'}>\r\n                      {'def refractory_period(t, r0, tau):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Function that returns the exponential decay model for the refractory period with an initial condition of 0 at t=0\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    return r0 * (1 - np.exp(-t / tau))\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def refractory_homogeneous_poisson(r0, T, tau, n=1):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Generates a homogeneous Poisson spike train with a refractory period (time constant tau), rate r (Hz) and duration T (s) using rejection sampling\\n' +\r\n                      '    :param r: rate\\n' +\r\n                      '    :param T: duration\\n' +\r\n                      '    :param tau: time constant for exponential decay model of refractory period\\n' +\r\n                      '    :param n: set number of trials. 1 will return a numpy array, anything larger will return a list of numpy arrays\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    if n != 1:          # Use recursion to sample multiple trials\\n' +\r\n                      '        return [refractory_homogeneous_poisson(r0, T, tau, n=1) for i in range(n)]\\n' +\r\n                      '    else:\\n' +\r\n                      '        t = homogeneous_poisson(r0, T)\\n' +\r\n                      '        retained_indices = [0]\\n' +\r\n                      '        for i in range(t.shape[0]-1):                           # Loop over all spikes\\n' +\r\n                      '            xrand = np.random.rand()                            \\n' +\r\n                      '            rt = refractory_period(t[i+1] - t[retained_indices[-1]], r0, tau)\\n' +\r\n                      '            if rt/r0 > xrand:                                   # Rejection sampling\\n' +\r\n                      '                retained_indices.append(i+1)\\n' +\r\n                      '        return t[retained_indices]\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Below is a very fast, vectorised way of rejection sampling. However, it will not be used since it treats all spikes at once and so will\\n' +\r\n                      '    delete too many spikes\\n' +\r\n                      '    else:\\n' +\r\n                      '        t = homogeneous_poisson(r0, T)\\n' +\r\n                      '        isi = to_isi(t)[1:]                                     # Exclude first spike since it can never be in a refractory period\\n' +\r\n                      '        rt = refractory_period(isi, r0, tau)                    # Get values for r(t) at each spike\\n' +\r\n                      '        xrand = np.random.rand(rt.shape[0])                     # Random variables for rejection sampling\\n' +\r\n                      '        retained_indices = np.where(rt/r0 > xrand)[0] + 1       # Rejection sampling (+1 to account for first spike)\\n' +\r\n                      '        retained_indices = np.insert(retained_indices, 0, 0)    # Add back the first spike (index 0)\\n' +\r\n                      '        retained_spikes = t[retained_indices]\\n' +\r\n                      '        return retained_spikes\\n' +\r\n                      '    \"\"\"' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      't = refractory_homogeneous_poisson(100, 10, 0.01, n=100)\\n' +\r\n                      'plot_spikes(t, T=1)\\n' +\r\n                      'plt.show()\\n' +\r\n                      'plot_interval_hist(t)\\n' +\r\n                      'plt.title(r\\'Interspike interval histogram $\\\\displaystyle\\\\tau_{\\\\text{ref}} = 10ms$\\')\\n' +\r\n                      'plt.show()'}\r\n                    </Highlight>\r\n                  </CustomCard>\r\n                </Grid>\r\n                <Grid key={1} item className={'neur__questions__gridR'}>\r\n                  <Grid container spacing={0} justify='center'>\r\n                    <Grid key={0} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={spike_train_refr} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                    <Grid key={1} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={isi_refr} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <hr className={'neur__hr'}/>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid key={0} item className={'neur__questions__gridL'}>\r\n                  <Typography>\r\n                    <i>Plot the coeffcient of variation as a function of <InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath> over the range 1 ms\r\n                    &nbsp;<InlineMath>{'\\\\leq \\\\tau_{\\\\text{ref}} \\\\leq'}</InlineMath> 20 ms, and plot interspike interval histograms for a few different values of\r\n                    &nbsp;<InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath> in this range.</i><br/><br/>\r\n                    The coefficient of variation decreases as the value of <InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath> is increased. This makes sense because the larger\r\n                    the value of <InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath>, the further our model is from an exponential distribution as seen by the deviation of the\r\n                    coefficient of variation.<br/>\r\n                    This is further confirmed by looking at the interspike interval histogram which shows us that the distribution is no longer\r\n                    just exponential: it now has the shape of a Poisson distribution but on closer inspection of the mean and variances, we see that\r\n                    the distribution is not exactly Poisson (mean and variance do not equal). <br/><br/>\r\n                    A description of modelling this distribution if found in the extensions section.\r\n                  </Typography>\r\n                  <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                    <Highlight language={'python'}>\r\n                      {'taus = np.linspace(1, 20, 50) / 1000\\n' +\r\n                      'Cv = [coefficient_variation(refractory_homogeneous_poisson(100, 10, i, 5)) for i in taus]\\n' +\r\n                      'plt.scatter(taus, Cv)\\n' +\r\n                      'plt.xlabel(r\\'$\\\\displaystyle\\\\tau_{\\\\text{ref}} (ms)$\\')\\n' +\r\n                      'plt.ylabel(\\'Coefficient of variation\\')\\n' +\r\n                      'plt.show()\\n' +\r\n                      '\\n' +\r\n                      't = refractory_homogeneous_poisson(100, 1000, 1e-3, 1)\\n' +\r\n                      'plot_interval_hist(t, 0, True, 0.33, r\\'$\\\\displaystyle\\\\tau_{\\\\text{ref}} = 1ms$\\')\\n' +\r\n                      '\\n' +\r\n                      't = refractory_homogeneous_poisson(100, 1000, 1e-2, 1)\\n' +\r\n                      'plot_interval_hist(t, 1, True, 0.33, r\\'$\\\\displaystyle\\\\tau_{\\\\text{ref}} = 10ms$\\')\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      't = refractory_homogeneous_poisson(100, 1000, 1e-1, 1)\\n' +\r\n                      'plot_interval_hist(t, 2, True, 0.33, r\\'$\\\\displaystyle\\\\tau_{\\\\text{ref}} = 100ms$\\')\\n' +\r\n                      '\\n' +\r\n                      'plt.legend()'}\r\n                    </Highlight>\r\n                  </CustomCard>\r\n                </Grid>\r\n                <Grid key={1} item className={'neur__questions__gridR'}>\r\n                  <Grid container spacing={0} justify='center'>\r\n                    <Grid key={0} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={cv_refr} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                    <Grid key={1} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={isis_refr} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <hr className={'neur__hr'}/>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid key={0} item className={'neur__questions__gridL'}>\r\n                  <Typography>\r\n                    <i>Compute the Fano factor for spike counts obtained over counting intervals ranging from 1 to 100 ms for the\r\n                      case <InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath> = 10 ms.</i><br/><br/>\r\n                    As compared to question 1, the Fano factor rapidly decays away from 1 as the window size increases which is not seen for the homogeneous\r\n                    Poisson spike generator. This is an expected result since larger windows capture the effect of the refractory period better, straying\r\n                    further from the homogeneous Poisson results where the Fano factor is 1.\r\n                  </Typography>\r\n                  <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                    <Highlight language={'python'}>\r\n                      {'t = refractory_homogeneous_poisson(100, 50, 1e-2, 10)\\n' +\r\n                      'windows = np.linspace(1, 100, 100) / 1000\\n' +\r\n                      'F = [fano_factor(t, i, 50) for i in windows]\\n' +\r\n                      'plt.scatter(1000*windows, F)\\n' +\r\n                      'plt.xlabel(\\'Window size (ms)\\')\\n' +\r\n                      'plt.ylabel(\\'Fano factor\\')\\n' +\r\n                      'plt.title(\\'Fano factor for different window sizes\\')\\n' +\r\n                      'plt.show()'}\r\n                    </Highlight>\r\n                  </CustomCard>\r\n                </Grid>\r\n                <Grid key={1} item className={'neur__questions__gridR'}>\r\n                  <Grid container spacing={0} justify='center'>\r\n                    <Grid key={0} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={fano_window_refr} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </CustomCard>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import {Grid, Link, Paper, Typography} from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nexport default class IPython extends React.Component {\r\n  render() {\r\n    return (\r\n      <Grid container spacing={3} className={'stats__grid'}>\r\n        <Grid item xs={12}>\r\n          <Paper className={'stats__text'}>\r\n            <Typography variant={'h4'} align={'center'} gutterBottom={true}>\r\n              Google Colab notebooks: <br/> <br/>\r\n            </Typography>\r\n            <Typography variant={'h6'} align={'center'} gutterBottom={true}>\r\n              <Link className={'link'} target=\"_blank\" href={'http://bit.ly/2MLMApR'}>\r\n                Gradient descent and Backpropagation\r\n              </Link>\r\n              <br/>\r\n              <Link className={'link'} target=\"_blank\" href={'http://bit.ly/2METBIW'}>\r\n                Regularisation and Cross-Entropy\r\n              </Link>\r\n              <br/>\r\n              <Link className={'link'} target=\"_blank\" href={'http://bit.ly/2QG9HnC'}>\r\n              k-means Clustering\r\n              </Link>\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport {Vector} from './components/utils'\r\nimport {Paper} from '@material-ui/core';\r\n\r\nexport default class RayTracing extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      refractiveIndex: 1.33,\r\n      shootDelay: 300\r\n    };\r\n    this.source = new Vector(null, null);\r\n    this.view = new Vector(null, null);\r\n    this.addMode = false;\r\n    this.objects = [];\r\n    this.normals = [];\r\n    this.frame_on = true;\r\n    this.dist = 0;\r\n    this.recursionDepth = 3;\r\n    this.numberOfRays = 0;\r\n    this.refraction = true;\r\n    this.showNormals = false;\r\n    this.popped = false;\r\n    this.polyDraw = false;\r\n    this.addedFirstVertex = false;\r\n    this.multiRayMode = false;\r\n    this.polyRadius = 50;\r\n    this.polyN = 8;\r\n    this.polyAngle = 0;\r\n    this.multiRayN = 12;\r\n    this.shootMode = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.cvs = document.getElementById('canvas');\r\n    this.ctx = this.cvs.getContext('2d');\r\n\r\n    this.frame = [new Vector(0, 0), new Vector(0, this.cvs.height),\r\n      new Vector(this.cvs.width, this.cvs.height), new Vector(this.cvs.width, 0)];\r\n    this.frame_normals = [new Vector(1, 0), new Vector(0, 1),\r\n      new Vector(-1, 0), new Vector(0, -1)];\r\n\r\n    this.cvs.addEventListener(\"mousedown\", this.clicked);\r\n    this.cvs.addEventListener(\"mousemove\", this.onMouseMove);\r\n    document.addEventListener(\"keydown\", this.addObject);\r\n    document.addEventListener('wheel', this.onScroll);\r\n\r\n    this.recursionDepthText = document.getElementById('recursionDepth');\r\n    this.objectsText = document.getElementById('objects');\r\n    this.edgesText = document.getElementById('edges');\r\n    this.frameText = document.getElementById('frame');\r\n    this.raysText = document.getElementById('rays');\r\n    this.refractionText = document.getElementById('refraction');\r\n    this.normalsText = document.getElementById('normals');\r\n    this.polyDrawText = document.getElementById('polyDraw');\r\n    this.multiRayText = document.getElementById('multiRay');\r\n    this.shootModeText = document.getElementById('shootMode');\r\n\r\n    this.recursionDepthText.innerHTML = \"Recursion depth: \" + this.recursionDepth.toString() + \" (use arrow keys to change)\";\r\n    this.objectsText.innerHTML = \"Number of objects: \" + this.objects.length.toString() + \" (press 'a' to add object edges)\";\r\n    this.edgesText.innerHTML = \"Number of edges: \" + this.normals.length.toString();\r\n    this.frameText.innerHTML = \"Frame (F): \" + (this.frame_on ? \"On\" : \"Off\");\r\n    this.raysText.innerHTML = \"Number of rays: \" + this.numberOfRays.toString();\r\n    this.refractionText.innerHTML = \"Refraction (T): \" + (this.refraction ? \"On\" : \"Off\");\r\n    this.normalsText.innerHTML = \"Surface normals (S): \" + (this.showNormals ? \"On\" : \"Off\");\r\n    this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n      \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n      \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°)\"  : \"Off\");\r\n    this.multiRayText.innerHTML = \"Multi-ray mode (M): \" + (this.multiRayMode ? \"On (N:\"+this.multiRayN.toString()+\")\" : \"Off\");\r\n    this.shootModeText.innerHTML = \"Shoot mode (Q): \" + (this.shootMode ? \"On\" : \"Off\");\r\n  }\r\n\r\n  calculateIntersect(a, b, c, d){\r\n    let p = b.vMinus(a);\r\n    let q = c.vMinus(a);\r\n    let r = d.vMinus(c);\r\n\r\n    let mu = this.round((p.y*q.x - p.x*q.y) / (p.x*r.y - p.y*r.x), 5);\r\n    let lambda = 0;\r\n    if (p.y === 0) {\r\n      lambda = this.round((q.x + r.x*mu) / p.x, 5);\r\n    }\r\n    else{\r\n      lambda = this.round((q.y + r.y*mu) / p.y, 5);\r\n    }\r\n    if (mu <= 1 && mu >= 0 && lambda > 0) {\r\n      return c.vPlus(r.mult(mu))\r\n    }\r\n  }\r\n\r\n  round(x, d) {\r\n    return Math.round(x*Math.pow(10, d))/Math.pow(10, d);\r\n  }\r\n\r\n\r\n\r\n  reflect(a, b){\r\n    return a.vMinus(b.mult(2*a.dot(b)))\r\n  }\r\n\r\n  refract(a, b, n){\r\n    a.normalise();\r\n\r\n    let cosi = Math.min(Math.max(a.dot(b), -1), 1);\r\n    let etai = 1;\r\n    let etat = n;\r\n    let N = b;\r\n    if (cosi < 0){\r\n      cosi = -cosi;\r\n    }\r\n    else {\r\n      let temp = etai;\r\n      etai = etat;\r\n      etat = temp;\r\n      N = b.mult(-1);\r\n    }\r\n    let eta = etai / etat;\r\n    let k = 1 - (eta * eta) * (1 - (cosi * cosi));\r\n    if (k <= 0){\r\n      return new Vector(0, 0)\r\n    }\r\n    else {\r\n      return a.mult(eta).vPlus(N.mult((eta * cosi) - Math.sqrt(k)))\r\n    }\r\n  }\r\n\r\n  drawLine(a, b){\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(...a.p);\r\n    this.ctx.lineTo(...b.p);\r\n    this.ctx.closePath();\r\n    this.ctx.strokeStyle = 'rgb(255, 255, 255)';\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  drawCircle(a, r){\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(...a.p, r, 0, 2 * Math.PI);\r\n    this.ctx.fillStyle = 'rgb(0, 0, 255)';\r\n    this.ctx.fill();\r\n  }\r\n\r\n  drawArrow(a, r, d){\r\n    this.ctx.moveTo(...a.p);\r\n    r.normalise();\r\n    r = r.mult(d);\r\n    let t = r.vPlus(a);\r\n    this.ctx.lineTo(...t.p);\r\n    let angle = Math.atan2(t.y - a.y, t.x - a.x);\r\n    let head1 = new Vector(Math.cos(angle + Math.PI / 6), Math.sin(angle + Math.PI / 6)).mult(d/5);\r\n    let head2 = new Vector(Math.cos(angle - Math.PI / 6), Math.sin(angle - Math.PI / 6)).mult(d/5);\r\n    this.ctx.lineTo(...t.vMinus(head1).p);\r\n    this.ctx.moveTo(...t.p);\r\n    this.ctx.lineTo(...t.vMinus(head2).p);\r\n  }\r\n\r\n  drawPolygon(a, r, n, angle, getVector){\r\n    this.ctx.beginPath();\r\n    let theta = Math.PI * (2 / n);\r\n    //angle = angle % theta;\r\n    let segment = 2*r*Math.sin(angle/2);\r\n    let phi = (Math.PI / 8) - (angle / 2);\r\n    let d = 2*r*Math.sin(theta/2);\r\n    let x = a.x - d/2 + segment*Math.cos(phi);\r\n    let y = a.y - r - segment*Math.sin(phi);\r\n    let polyVector = [new Vector(x, y)];\r\n    let polyNormals = [];\r\n    this.ctx.moveTo(x, y);\r\n    for (let i=0; i<n-1; i++){\r\n      x += d * Math.cos(i*theta + angle);\r\n      y += d * Math.sin( i*theta + angle);\r\n      if (getVector) {\r\n        polyVector.push(new Vector(x, y));\r\n        polyNormals.push(this.calculateNormal(polyVector[polyVector.length-2], polyVector[polyVector.length-1]));\r\n      }\r\n      else {\r\n        this.ctx.lineTo(x, y);\r\n      }\r\n    }\r\n    this.ctx.closePath();\r\n    this.ctx.stroke();\r\n    if (getVector) {\r\n      polyNormals.push(this.calculateNormal(polyVector[polyVector.length-1], polyVector[0]));\r\n      return [polyVector, polyNormals]\r\n    }\r\n  }\r\n\r\n  recursiveReflection = (start, target, n) => {\r\n    // Takes in the previous reflection point or source and the reflected ray or viewing direction\r\n    // Initialise with source and viewing direction\r\n    // n is recursion depth\r\n    if (n === 0){\r\n      return 1\r\n    }\r\n\r\n    // Calculate all intersections\r\n    let intersections = [];\r\n    for (let i=0; i<this.objects.length; i++){\r\n      for (let j=1; j<this.objects[i].length; j++){\r\n        intersections.push(this.calculateIntersect(start, target, this.objects[i][j-1], this.objects[i][j]));\r\n      }\r\n      // Add last intersection (between first and last vertex) if not a line segment\r\n      if (this.objects[i].length > 2) {\r\n        intersections.push(this.calculateIntersect(start, target, this.objects[i][this.objects[i].length-1], this.objects[i][0]));\r\n      }\r\n    }\r\n    if (this.frame.length > 0) {\r\n      for (let i = 1; i < this.frame.length; i++) {\r\n        intersections.push(this.calculateIntersect(start, target, this.frame[i - 1], this.frame[i]));\r\n      }\r\n      intersections.push(this.calculateIntersect(start, target, this.frame[this.frame.length-1], this.frame[0]));\r\n    }\r\n\r\n    // Find intersection closest to reflection point\r\n    let minDist = 100000000;\r\n    let nearestIntersectIndex = -1;\r\n    let dist = 0;\r\n    for (let i=0; i<intersections.length; i++){\r\n      if (intersections[i]) {\r\n        dist = intersections[i].vMinus(start).l22;\r\n        if (dist < minDist){\r\n          nearestIntersectIndex = i;\r\n          minDist = dist;\r\n        }\r\n      }\r\n    }\r\n    if (nearestIntersectIndex >= 0) {\r\n      // Draw intersection and reflection ray\r\n      this.drawLine(start, intersections[nearestIntersectIndex]);\r\n      this.numberOfRays++;\r\n      let normal = new Vector(null, null);\r\n      if (nearestIntersectIndex >= this.normals.length) {\r\n        normal = this.frame_normals[nearestIntersectIndex - this.normals.length];\r\n      }\r\n      else {\r\n        normal = this.normals[nearestIntersectIndex]\r\n      }\r\n      if (!normal) {\r\n        normal = this.frame_normals[nearestIntersectIndex - this.normals.length - 1];\r\n      }\r\n      this.drawCircle(intersections[nearestIntersectIndex], 4);\r\n      let reflectedRay = this.reflect(intersections[nearestIntersectIndex].vMinus(start),\r\n        normal).vPlus(intersections[nearestIntersectIndex]);\r\n      if (this.shootMode){\r\n        setTimeout( () => {\r\n          this.recursiveReflection(intersections[nearestIntersectIndex], reflectedRay, n - 1)\r\n        }, this.state.shootDelay);\r\n        if (this.refraction) {\r\n          let refractedRay = this.refract(intersections[nearestIntersectIndex].vMinus(start),\r\n            normal,this.state.refractiveIndex).vPlus(intersections[nearestIntersectIndex]);\r\n          setTimeout(  () => {\r\n            this.recursiveReflection(intersections[nearestIntersectIndex], refractedRay, n - 1)\r\n          }, this.state.shootDelay);\r\n        }\r\n      }\r\n      else {\r\n        this.recursiveReflection(intersections[nearestIntersectIndex], reflectedRay, n - 1);\r\n        if (this.refraction) {\r\n          let refractedRay = this.refract(intersections[nearestIntersectIndex].vMinus(start),\r\n            normal,this.state.refractiveIndex).vPlus(intersections[nearestIntersectIndex]);\r\n          this.recursiveReflection(intersections[nearestIntersectIndex], refractedRay, n - 1);\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n  };\r\n\r\n\r\n  calculateNormal(a, b){\r\n    let c = b.vMinus(a);\r\n    let n = new Vector(c.y, -c.x);\r\n    n.normalise();\r\n    return n;\r\n  }\r\n\r\n  clicked = (event) =>{\r\n    let rect = this.cvs.getBoundingClientRect();\r\n    if (!this.addMode && !this.polyDraw) {\r\n      this.source.set(event.x - rect.left, event.y - rect.top);\r\n      this.draw();\r\n    }\r\n    else if (this.polyDraw) {\r\n      let poly = this.drawPolygon(new Vector(event.x - rect.left, event.y - rect.top), this.polyRadius, this.polyN, this.polyAngle, true);\r\n      this.objects.push(poly[0]);\r\n      this.normals.push(...poly[1]);\r\n      this.objectsText.innerHTML = \"Number of objects: \" + this.objects.length.toString() + \" (press 'a' to add object edges)\";\r\n      this.edgesText.innerHTML = \"Number of edges: \" + this.normals.length.toString();\r\n    }\r\n    else {\r\n      if (!this.addedFirstVertex) {\r\n        this.objects.push([]);\r\n        this.addedFirstVertex = true;\r\n      }\r\n      this.objects[this.objects.length - 1].push(new Vector(event.x - rect.left, event.y - rect.top));\r\n      if (this.objects[this.objects.length - 1].length > 1) {\r\n        this.normals.push(this.calculateNormal(this.objects[this.objects.length - 1][this.objects[this.objects.length - 1].length - 1],\r\n          this.objects[this.objects.length - 1][this.objects[this.objects.length - 1].length - 2]));\r\n        this.edgesText.innerHTML = \"Number of edges: \" + this.normals.length.toString();\r\n      }\r\n      this.draw();\r\n    }\r\n  };\r\n\r\n  onScroll = (event) =>{\r\n    if (this.polyDraw) {\r\n      if (!(this.polyN === 3 && event.deltaY > 0)){\r\n        this.polyN -= event.deltaY / 100;\r\n        this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n          \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n          \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°, scroll/arrow keys)\"  : \"Off\");\r\n        this.draw();\r\n      }\r\n    }\r\n    if (this.multiRayMode) {\r\n      if (!(this.multiRayN === 1 && event.deltaY > 0)){\r\n        this.multiRayN -= event.deltaY / 100;\r\n        this.multiRayText.innerHTML = \"Multi-ray mode (M): \" + (this.multiRayMode ? \"On (N:\"+this.multiRayN.toString()+\", scroll)\" : \"Off\");\r\n        this.draw();\r\n      }\r\n    }\r\n  };\r\n\r\n  onMouseMove = (event) => {\r\n    if (!(this.addMode && !this.polyDraw)) {\r\n      let rect = this.cvs.getBoundingClientRect();\r\n      this.view.set(event.x - rect.left , event.y - rect.top);\r\n      if (!this.shootMode){\r\n        this.draw();\r\n      }\r\n    }\r\n  };\r\n\r\n  addObject = (event) => {\r\n    if (event.keyCode === 65) {\r\n      this.addMode = !this.addMode;\r\n      if (this.addMode) {\r\n        this.addedFirstVertex = false;\r\n        this.draw();\r\n      }\r\n      if (!this.addMode) {\r\n        if (this.objects.length > 0) {\r\n          if (this.objects[this.objects.length - 1].length > 2) {\r\n            this.normals.push(this.calculateNormal(this.objects[this.objects.length - 1][0],\r\n              this.objects[this.objects.length - 1][this.objects[this.objects.length - 1].length - 1]));\r\n            this.edgesText.innerHTML = \"Number of edges: \" + this.normals.length.toString();\r\n            this.objectsText.innerHTML = \"Number of objects: \" + this.objects.length.toString() + \" (press 'a' to add object edges)\";\r\n          } else if (this.objects[this.objects.length - 1].length === 2) {\r\n            this.objectsText.innerHTML = \"Number of objects: \" + this.objects.length.toString() + \" (press 'a' to add object edges)\";\r\n          }\r\n          else {\r\n            this.objects.pop();\r\n          }\r\n        }\r\n        this.draw();\r\n      }\r\n    }\r\n    if (event.keyCode === 70) {\r\n      if (this.frame_on){\r\n        this.frame = [];\r\n        this.frame_normals = [];\r\n      }\r\n      else {\r\n        this.frame.push(new Vector(0, 0), new Vector(0, this.cvs.height),\r\n          new Vector(this.cvs.width, this.cvs.height), new Vector(this.cvs.width, 0));\r\n        this.frame_normals.push(new Vector(1, 0), new Vector(0, 1),\r\n          new Vector(-1, 0), new Vector(0, -1));\r\n      }\r\n      this.frame_on = !this.frame_on;\r\n      this.frameText.innerHTML = \"Frame (F): \" + (this.frame_on ? \"On\" : \"Off\");\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 37) {\r\n      if (this.polyDraw) {\r\n        this.polyAngle -= Math.PI / 16;\r\n        this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n          \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n          \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°, scroll/arrow keys)\"  : \"Off\");\r\n      }\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 38) {\r\n      if (this.polyDraw) {\r\n        this.polyRadius += 10;\r\n        this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n          \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n          \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°, scroll/arrow keys)\"  : \"Off\");\r\n      }\r\n      else {\r\n        this.recursionDepth++;\r\n        this.recursionDepthText.innerHTML = \"Recursion depth: \" + this.recursionDepth.toString() + \" (use arrow keys to change)\";\r\n      }\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 39) {\r\n      if (this.polyDraw) {\r\n        this.polyAngle += Math.PI / 16;\r\n        this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n          \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n          \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°, scroll/arrow keys)\"  : \"Off\");\r\n      }\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 40) {\r\n      if (this.polyDraw) {\r\n        if (this.polyRadius >= 20) {\r\n          this.polyRadius -= 10;\r\n          this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n            \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n            \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°, scroll/arrow keys)\"  : \"Off\");\r\n        }\r\n      }\r\n      else {\r\n        if (this.recursionDepth !== 1) {\r\n          this.recursionDepth--;\r\n          this.recursionDepthText.innerHTML = \"Recursion depth: \" + this.recursionDepth.toString() + \" (use arrow keys to change)\";\r\n        }\r\n      }\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 82) {\r\n      if (this.polyDraw){\r\n        this.polyRadius = 50;\r\n        this.polyN = 8;\r\n        this.polyAngle = 0;\r\n        this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n          \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n          \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°, scroll/arrow keys)\"  : \"Off\");\r\n      }\r\n      else {\r\n        this.recursionDepth = 3;\r\n        this.recursionDepthText.innerHTML = \"Recursion depth: \" + this.recursionDepth.toString() + \" (use arrow keys to change)\";\r\n        this.multiRayN = 12;\r\n        this.multiRayText.innerHTML = \"Multi-ray mode (M): \" + (this.multiRayMode ? \"On (N:\"+this.multiRayN.toString()+\", scroll)\" : \"Off\");\r\n      }\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 67) {\r\n      this.objects = [];\r\n      this.normals = [];\r\n      this.objectsText.innerHTML = \"Number of objects: \" + this.objects.length.toString() + \" (press 'a' to add object edges)\";\r\n      this.edgesText.innerHTML = \"Number of edges: \" + this.normals.length.toString();\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 84) {\r\n      this.refraction = !this.refraction;\r\n      this.refractionText.innerHTML = \"Refraction (T): \" + (this.refraction ? \"On\" : \"Off\");\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 83) {\r\n      this.showNormals = !this.showNormals;\r\n      this.normalsText.innerHTML = \"Surface normals (S): \" + (this.showNormals ? \"On\" : \"Off\");\r\n      if (this.addMode && (!(this.objects.length > 0) || !(this.objects[this.objects.length - 1].length > 0))){\r\n        this.objects.pop();\r\n        this.popped = !this.popped;\r\n      }\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 80) {\r\n      this.polyDraw = !this.polyDraw;\r\n      this.polyDrawText.innerHTML = \"Polygon draw mode (P): \" + (this.polyDraw ?\r\n        \"On (N=\"+this.polyN.toString()+\", R=\"+this.polyRadius.toString()+\", \" +\r\n        \"θ=\"+(this.round((this.polyAngle*(180/Math.PI)%360), 3)).toString()+\"°, scroll/arrow keys)\"  : \"Off\");\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 77) {\r\n      this.multiRayMode = !this.multiRayMode;\r\n      this.multiRayText.innerHTML = \"Multi-ray mode (M): \" + (this.multiRayMode ? \"On (N:\"+this.multiRayN.toString()+\", scroll)\" : \"Off\");\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 81) {\r\n      this.shootMode = !this.shootMode;\r\n      this.shootModeText.innerHTML = \"Shoot mode (Q): \" + (this.shootMode ? \"On\" : \"Off\");\r\n      this.draw();\r\n    }\r\n    if (event.keyCode === 32) {\r\n      if (this.shootMode) {\r\n        this.draw();\r\n      }\r\n    }\r\n  };\r\n\r\n  draw_border(){\r\n    this.ctx.clearRect(0, 0, this.cvs.width, this.cvs.height);\r\n    // Draw frame\r\n    if (this.frame.length > 0) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(...this.frame[0].p);\r\n      for (let i = 1; i < this.frame.length; i++) {\r\n        this.ctx.lineTo(...this.frame[i].p);\r\n      }\r\n      this.ctx.closePath();\r\n      this.ctx.strokeStyle = 'rgb(255, 0, 0)';\r\n      this.ctx.lineWidth = 4;\r\n      this.ctx.stroke();\r\n      this.ctx.strokeStyle = 'rgb(0, 0, 0)';\r\n      this.ctx.lineWidth = 1;\r\n    }\r\n    else {\r\n      this.ctx.lineWidth = 4;\r\n      this.ctx.strokeStyle = 'rgb(255, 255, 255)';\r\n      this.ctx.strokeRect(0, 0, this.cvs.width, this.cvs.height);\r\n      this.ctx.lineWidth = 1;\r\n    }\r\n  }\r\n\r\n  drawNormals(){\r\n    let k = 0;\r\n    this.ctx.beginPath();\r\n    for (let i = 0; i < this.objects.length; i++) {\r\n      for (let j = 1; j < this.objects[i].length; j++) {\r\n        this.drawArrow(this.objects[i][j].vPlus(this.objects[i][j-1]).mult(0.5), this.normals[k], 30);\r\n        k++;\r\n      }\r\n      if (this.objects[i].length > 2){\r\n        if (!this.normals[k]) {\r\n          this.drawArrow(this.objects[i][0].vPlus(this.objects[i][this.objects[i].length-1]).mult(0.5),\r\n            this.calculateNormal(this.objects[i][0], this.objects[i][this.objects[i].length - 1]) ,30);\r\n        }\r\n        else {\r\n          this.drawArrow(this.objects[i][0].vPlus(this.objects[i][this.objects[i].length-1]).mult(0.5), this.normals[k], 30);\r\n        }\r\n        k++;\r\n      }\r\n    }\r\n    this.ctx.closePath();\r\n    this.ctx.strokeStyle = 'rgb(255, 255, 255)';\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  drawObjects(){\r\n    if (this.objects.length > 0) {\r\n      if (this.objects[this.objects.length - 1].length > 0) {\r\n        for (let i = 0; i < this.objects.length; i++) {\r\n          this.ctx.beginPath();\r\n          this.ctx.moveTo(...this.objects[i][0].p);\r\n          for (let j = 1; j < this.objects[i].length; j++) {\r\n            this.ctx.lineTo(...this.objects[i][j].p);\r\n          }\r\n          this.ctx.closePath();\r\n          this.ctx.strokeStyle = 'rgb(255, 255, 255)';\r\n          this.ctx.stroke();\r\n          if (this.refraction) {\r\n            this.ctx.fillStyle = 'rgba(255,148,0,0.38)';\r\n            this.ctx.fill();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  drawMultiRays(){\r\n    let ray = new Vector(0, 0);\r\n    let angle = Math.PI * (2 / this.multiRayN);\r\n    for (let i=0; i<this.multiRayN; i++) {\r\n      ray = new Vector(this.round(Math.sin(i*angle), 4), -this.round(Math.cos(i*angle), 4));\r\n      this.recursiveReflection(this.view, this.view.vPlus(ray), this.recursionDepth);\r\n    }\r\n  }\r\n\r\n  draw(){\r\n    this.draw_border();\r\n    this.numberOfRays = 0;\r\n    // Draw edit mode background\r\n    if (this.addMode){\r\n      this.ctx.fillStyle = 'rgb(0, 0, 255, 0.2)';\r\n      this.ctx.fillRect(2, 2, this.cvs.width-4, this.cvs.height-4);\r\n    }\r\n    // Draw source\r\n    if (!this.multiRayMode) {\r\n      this.drawCircle(this.source, 3);\r\n    }\r\n    // Polygon mode\r\n    if (this.polyDraw) {\r\n      this.drawPolygon(this.view, this.polyRadius, this.polyN, this.polyAngle, false);\r\n    }\r\n\r\n    //Draw objects\r\n    this.drawObjects();\r\n\r\n    if (this.showNormals){\r\n      this.drawNormals();\r\n    }\r\n    if (this.popped){\r\n      this.objects.push([]);\r\n      this.popped = !this.popped;\r\n    }\r\n    if (!(this.polyDraw)) {\r\n      if (this.multiRayMode){\r\n        this.drawMultiRays();\r\n      }\r\n      else {\r\n        this.recursiveReflection(this.source, this.view, this.recursionDepth);\r\n      }\r\n    }\r\n    this.raysText.innerHTML = \"Number of rays: \" + this.numberOfRays.toString();\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Paper className={\"rayPaper\"}>\r\n        <div style={{height: \"5em\"}}/>\r\n        <canvas id=\"canvas\" width={0.99*window.innerWidth} height={0.73*window.innerHeight}/>\r\n        <section className=\"info\">\r\n          <div className=\"row\">\r\n            <div className=\"rtcard\" id=\"recursionDepth\"/>\r\n            <div className=\"rtcard\" id=\"objects\"/>\r\n            <div className=\"rtcard\" id=\"edges\"/>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"rtcard\" id=\"frame\"/>\r\n            <div className=\"rtcard\" id=\"refraction\"/>\r\n            <div className=\"rtcard\" id=\"normals\"/>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"rtcard\" id=\"polyDraw\"/>\r\n            <div className=\"refr\">\r\n              <label htmlFor=\"refractiveIndex\">Refractive index: </label>\r\n              <input value={this.state.refractiveIndex} placeholder=\"1.33\" id=\"refractiveIndex\"\r\n                     onChange={event=>{this.setState({refractiveIndex: event.target.value})}} />\r\n            </div>\r\n            <div className=\"rtcard\" id=\"rays\"/>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"rtcard\" id=\"multiRay\"/>\r\n            <div className=\"refr\">\r\n              <div id=\"shootMode\"/>\r\n              <input value={this.state.shootDelay} placeholder=\"300\" id=\"shootDelay\"\r\n                     onChange={event=>{this.setState({shootDelay: event.target.value})}} />\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport * as am4core from '@amcharts/amcharts4/core';\r\nimport book_cover from '../images/book_cover.jpg';\r\nimport {CardMedia, Grid, Link, Paper, Typography} from '@material-ui/core';\r\n\r\nexport default class NeurInfo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.chart = null;\r\n    am4core.options.commercialLicense = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid container spacing={3} className={'stats__grid'}>\r\n        <Grid item xs={12}>\r\n          <Paper className={'neur__info__text'}>\r\n            <Typography variant={'h4'} align={'center'} gutterBottom={true}>\r\n              Theoretical Neuroscience <br /> &nbsp;\r\n            </Typography>\r\n            <Grid container spacing={3} justify='center'>\r\n              <Grid key={0} item className={'neur__info__grid'}>\r\n                <CardMedia image={book_cover} className={'neur__info__image'}/>\r\n              </Grid>\r\n              <Grid key={1} item className={'neur__info__grid'}>\r\n                <Typography gutterBottom={true}>\r\n                  This section will go through the &nbsp;\r\n                  <Link className={'link'} target=\"_blank\" href={'https://www.gatsby.ucl.ac.uk/~dayan/book/exercises/'}>\r\n                    problems\r\n                  </Link>\r\n                  &nbsp; chapter by chapter from Peter Dayan and L. F. Abbott's Theoretical\r\n                  neuroscience textbook. The solutions are computed in python, there will be code snippets along with the answers.\r\n                  The accompanying graphs are saved from matplotlib plots. The reason python was used over javascript is due to\r\n                  it's fast and wide linear algebra modules such as numpy.\r\n                </Typography>\r\n                <Typography gutterBottom={true}>\r\n                  For certain questions, there might be extensions referenced. These can be found under the 'extensions' tab.\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport * as am4core from '@amcharts/amcharts4/core';\r\nimport book_cover from '../images/book_cover.jpg';\r\nimport {CardMedia, Grid, Link, Paper, Typography} from '@material-ui/core';\r\nimport 'katex/dist/katex.min.css';\r\nimport CustomCard from '../components/CustomCard';\r\nimport {Code, Subject} from '@material-ui/icons';\r\nimport {InlineMath, BlockMath} from 'react-katex';\r\nimport Highlight from 'react-highlight.js';\r\nimport norm_approx from '../images/norm_approx.svg';\r\nimport perf1 from '../images/perf1.svg';\r\nimport perf2 from '../images/perf2.svg';\r\nimport method_of_moments from '../images/method_of_moments.svg';\r\nimport mean_fit from '../images/mean_fit.svg';\r\nimport var_fit from '../images/var_fit.svg';\r\nimport fano_window_refr from '../images/fano_window_refr.svg';\r\n\r\nexport default class NeurExt extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid container spacing={3} className={'stats__grid'}>\r\n        <Grid item xs={12}>\r\n          <Paper className={'stats__text'}>\r\n            <Typography variant={'h4'} align={'center'} gutterBottom={true}>\r\n              Extensions <br /> &nbsp;\r\n            </Typography>\r\n            <CustomCard title={'Question 1'} avatar={<Subject />} expanded={false}>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid key={0} item className={'neur__questions__gridL'}>\r\n                  <Typography  gutterBottom={true}>\r\n                    The problem with the vectorised method specified in the main text is that we have to specify how many spikes we wish to calculate (which might lead to a final duration\r\n                    lower or higher than the specified spike train duration <InlineMath>{'T'}</InlineMath>). To solve this issue, we could oversample and discard the samples\r\n                    that lead to trains longer than <InlineMath>{'T'}</InlineMath>. The question is then by how much should we oversample so that we always have enough samples\r\n                    to reach <InlineMath>{'T'}</InlineMath> but also minimising the number of samples for better computational efficiency. Since we are usually using Poisson\r\n                    rates (<InlineMath>{'\\\\text{r}\\\\times T'}</InlineMath>) of above 100, we may approximate the Poisson by a Gaussian distribution and hence, if we oversample\r\n                    by 3 standard deviations, we will get that 99.7% of trials will have enough samples to reach <InlineMath>{'T'}</InlineMath> and since this number depends\r\n                    on the rate, it is a good lower bound. The standard deviation in this case is <InlineMath>{'\\\\sqrt{\\\\text{r}T}'}</InlineMath>.\r\n                    <br/><br/>\r\n                    To the right, we see that the distribution of spike train durations is shaped like a Gaussian when\r\n                    <InlineMath>{'\\\\text{r} = 100'}</InlineMath> and <InlineMath>{'T=5'}</InlineMath> for\r\n                    the vector method. <br />\r\n                    The bottom left graph shows us the distribution of the spike train durations if we use the iterative method. This method is much\r\n                    much slower (~30-50 times slower). <br />\r\n                    Finally, the bottom right graph shows us the distribution if we use the vectorised method with oversampling of 3 standard deviations.\r\n                    We see that this distribution is very similar to the one with the iterative method. The oversampling leads to a very small increasing in computing time (~0.01ms).\r\n                  </Typography>\r\n                  <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                    <Highlight language={'python'}>\r\n                      {'def performance_experiment(r, T, n, oversample=True, iterative=False, bins=50):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Experiment that compares spike train duration distribution and computation time\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    tic = perf_counter()    # Performance timer\\n' +\r\n                      '    if iterative:\\n' +\r\n                      '        t = homogeneous_poisson_iterative(r, T, n=n)\\n' +\r\n                      '    else:\\n' +\r\n                      '        t = homogeneous_poisson(r, T, n=n, oversample=oversample)\\n' +\r\n                      '    toc = perf_counter()\\n' +\r\n                      '    print(\\'Spike train generation (single train): \\' + str(round((toc-tic)*1000/n, 5)) + \\' ms\\')  # Take average performance time\\n' +\r\n                      '    plt.hist([i[-1]for i in t], bins=bins, fill=None, ec=plt.rcParams[\\'axes.prop_cycle\\'].by_key()[\\'color\\'][0]) # Histogram of final spike time\\n' +\r\n                      '    plt.xlabel(\\'Spike train duration (s)\\')\\n' +\r\n                      '    plt.ylabel(\\'Histogram count\\')\\n' +\r\n                      '    plt.show()\\n' +\r\n                      '\\n' +\r\n                      'bins = np.linspace(9.92, 10, 51)\\n' +\r\n                      'print(\\'No oversampling\\')\\n' +\r\n                      'performance_experiment(100, 10, 100000, oversample=False)\\n' +\r\n                      'print(\\'Iterative method \\')\\n' +\r\n                      'performance_experiment(100, 10, 10000, iterative=True, bins=bins)\\n' +\r\n                      'print(\\'Vectorised method with oversampling\\')\\n' +\r\n                      'performance_experiment(100, 10, 10000, bins=bins)'}\r\n                    </Highlight>\r\n                  </CustomCard>\r\n                  <Typography gutterBottom={true}>\r\n                    <br/><br/>\r\n                    To prove the forms of <InlineMath>{'\\\\text{p}_{\\\\tau}[\\\\tau]'}</InlineMath> (probability density of the ISI) and\r\n                    <InlineMath>{'\\\\text{P}_N[n]'}</InlineMath> (probability of <InlineMath>{'n'}</InlineMath> spikes firing within the interval <InlineMath>{'T'}</InlineMath>),\r\n                    we start with considering the probability of a spike firing within one of <InlineMath>{'M'}</InlineMath> small time bins <InlineMath>{'\\\\Delta t = \\\\frac{T}{M}'}</InlineMath>\r\n                    (small enough so two spikes can never fall in the same bin). This probability is equal to <InlineMath>{'\\\\text{r}\\\\Delta t'}</InlineMath>\r\n                    , the fraction of trials during which there was a spike within the given bin.\r\n                    <br/>\r\n                    The probability of <InlineMath>{'n'}</InlineMath> spikes firing within an interval <InlineMath>{'T'}</InlineMath> is the product\r\n                    of the probability of generating <InlineMath>{'n'}</InlineMath> spikes within a given set of bins <InlineMath>{'(\\\\text{r}\\\\Delta t)^n'}</InlineMath>, the probability of generating no\r\n                    spikes in the remaining bins <InlineMath>{'(1-\\\\text{r}\\\\Delta t)^{M-n}'}</InlineMath> and a combinatorial factor\r\n                    <InlineMath>{'M \\\\choose n'}</InlineMath>. Taking the limit as the bin sizes go to zero, we get that:\r\n                    <BlockMath>\r\n                      {'\\\\text{P}_N[n]=\\\\lim_{\\\\Delta t\\\\to 0}\\\\frac{M!}{(M-n)!n!}(\\\\text{r}\\\\Delta t)^n(1-\\\\text{r}\\\\Delta t)^{M-n}'}\r\n                    </BlockMath>\r\n                    To evaluate this limit, we take the limit of the three parts separately. For the binomial coefficient, we note that <InlineMath>{'M'}</InlineMath> grows without\r\n                    bound since <InlineMath>{'M = \\\\frac{T}{\\\\Delta t}'}</InlineMath>.This means that:\r\n                    <BlockMath>\r\n                      {'\\\\lim_{\\\\Delta t \\\\to 0}\\\\frac{M!}{(M-n)!} = \\\\lim_{\\\\Delta t \\\\to 0}M \\\\times (M-1) \\\\times\\\\dots\\\\times(M-n+1) = M^n'}\r\n                    </BlockMath>\r\n                    since <InlineMath>{'n'}</InlineMath> is constant and <InlineMath>{'M'}</InlineMath> tends towards infinity.\r\n                    This result cancels with the second term since <InlineMath>{'\\\\Delta t^n \\\\propto \\\\frac{1}{M^n}'}</InlineMath>.\r\n                    For the final term, we make the following substitution: <InlineMath>{'\\\\epsilon = -\\\\text{r}\\\\Delta t'}</InlineMath> from which we get:\r\n                    <BlockMath>\r\n                      {'\\\\lim_{\\\\Delta t \\\\to 0}(1-\\\\text{r}\\\\Delta t)^{M-n} = \\\\lim_{\\\\epsilon \\\\to 0}\\\\Big((1+\\\\epsilon)^{\\\\frac{1}{\\\\epsilon}}\\\\Big)^{-\\\\text{r}T} = e^{-\\\\text{r}T}'}\r\n                    </BlockMath>\r\n                    which follows from the definition that:\r\n                    <BlockMath>\r\n                      {'\\\\lim_{\\\\epsilon\\\\to 0}(1+\\\\epsilon)^{\\\\frac{1}{\\\\epsilon}}=e'}\r\n                    </BlockMath>\r\n                    Putting this together we get that:\r\n                    <BlockMath>\r\n                      {'\\\\text{P}_N[n] = \\\\frac{M^n}{n!}\\\\frac{(\\\\text{r}T)^n}{M^n}e^{-\\\\text{r}T}= \\\\frac{(\\\\text{r}T)^n}{n!}e^{-\\\\text{r}T} = \\\\text{Po}(n;\\\\lambda=\\\\text{r}T)'}\r\n                    </BlockMath>\r\n                    <br/><br/>\r\n                    For the ISI, we note that the the probability of a spike being generated withing the interval <InlineMath>{'[\\\\tau, \\\\tau+\\\\Delta t]'}</InlineMath>\r\n                    is the probability that no spike is fired over a time <InlineMath>{'\\\\tau'}</InlineMath> (<InlineMath>{'\\\\text{P}_N[0]=e^{-\\\\text{r}\\\\tau}'}</InlineMath>)\r\n                    multiplied by the probability of a spike firing withing a small interval (<InlineMath>{'\\\\text{r}\\\\Delta t'}</InlineMath>).\r\n                    To get the probability density, we just divide by <InlineMath>{'\\\\Delta t'}</InlineMath> to get:\r\n                    <BlockMath>\r\n                      {'\\\\text{p}_{\\\\tau}[\\\\tau] = \\\\text{r} e^{-\\\\text{r}\\\\tau} = \\\\text{Exp}\\\\Big(\\\\tau;\\\\lambda=\\\\frac{1}{\\\\text{r}}\\\\Big)'}\r\n                    </BlockMath>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid key={1} item className={'neur__questions__gridR'}>\r\n                  <CardMedia image={norm_approx} className={'neur__questions__image'}/>\r\n                  <Grid container spacing={0} justify='center'>\r\n                    <Grid key={0} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={perf1} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                    <Grid key={1} item className={'neur__questions__gridL'}>\r\n                      <CardMedia image={perf2} className={'neur__questions__image'}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </CustomCard>\r\n            <CustomCard title={'Question 2'} avatar={<Subject />} expanded={false}>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid key={0} item className={'neur__questions__gridL'}>\r\n                  <Typography  gutterBottom={true}>\r\n                    It has been suggested that a gamma distribution of the form:\r\n                    <BlockMath>\r\n                      {'\\\\text{p}_{\\\\tau}[\\\\tau] = \\\\frac{\\\\text{r}(\\\\text{r}\\\\tau)^ke^{-\\\\text{r}\\\\tau}}{k!} = \\\\text{Gamma}(k+1, \\\\text{r})'}\r\n                    </BlockMath>\r\n                    desribes these distributions. The question now is how <InlineMath>{'k'}</InlineMath> depends on <InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath>. To answer this question, we will find\r\n                    the analytic mean and variance of this function and then fit this to the experimental results.\r\n                    <BlockMath>\r\n                      {'\\\\begin{aligned}\\n' +\r\n                      '\\\\langle\\\\tau\\\\rangle &= \\\\int^{\\\\infty}_0 \\\\tau \\\\frac{\\\\text{r}(\\\\text{r}\\\\tau)^ke^{-\\\\text{r}\\\\tau}}{k!} \\\\text{d}\\\\tau = \\\\frac{\\\\Gamma(k+2)}{\\\\text{r}k!} = \\\\frac{k+1}{\\\\text{r}}\\\\\\\\\\n' +\r\n                      '\\\\sigma_{\\\\tau}^2 &= \\\\int^{\\\\infty}_0 \\\\tau^2 \\\\frac{\\\\text{r}(\\\\text{r}\\\\tau)^ke^{-\\\\text{r}\\\\tau}}{k!} \\\\text{d}\\\\tau - \\\\langle\\\\tau\\\\rangle^2 = \\\\frac{\\\\Gamma(k+3)}{\\\\text{r}^2k!} - \\\\langle\\\\tau\\\\rangle^2\\\\\\\\\\n' +\r\n                      '&= \\\\frac{(k+2)(k+1)}{\\\\text{r}^2} -  \\\\frac{(k+1)^2}{\\\\text{r}^2} = \\\\frac{k+1}{\\\\text{r}^2}\\\\\\\\\\n' +\r\n                      'C_V &= \\\\frac{\\\\sigma_{\\\\tau}}{\\\\langle\\\\tau\\\\rangle}=\\\\frac{1}{\\\\sqrt{k+1}}\\n' +\r\n                      '\\\\end{aligned}'}\r\n                    </BlockMath>\r\n                    We can plot <InlineMath>{'\\\\text{r}\\\\langle\\\\tau\\\\rangle - 1'}</InlineMath> and <InlineMath>{'\\\\text{r}^2\\\\sigma_{\\\\tau}^2 - 1'}</InlineMath>\r\n                    &nbsp;against <InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath> and see whether the curves line up to determine a relationship between\r\n                    &nbsp;<InlineMath>{'k'}</InlineMath> and <InlineMath>{'\\\\tau_{\\\\text{ref}}'}</InlineMath>.\r\n                    In our case, we see that the curves have different forms: the variance seems to follow a linear trend, and the mean a combination\r\n                    of a linear and decaying exponential. An interesting feature is that they intersect at around\r\n                    &nbsp;<InlineMath>{'\\\\tau_{\\\\text{ref}}=38'}</InlineMath>ms. This suggests that our assumption about the model only depending on one latent variable\r\n                    &nbsp;(<InlineMath>{'k'}</InlineMath>) is likely wrong. This method of parameter estimation is a variant of the method of moments.\r\n                  </Typography>\r\n                  <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                    <Highlight language={'python'}>\r\n                      {'def mean_fit(x):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Function that fits tau_ref to k fitted on the mean of the ISIs\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    A = 2.29\\n' +\r\n                      '    B = 0.0252\\n' +\r\n                      '    C = 0.0116\\n' +\r\n                      '    return A*(1-np.exp(-B*x)) + C*x\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'def var_fit(x):\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    Function that fits tau_ref to k fitted on the variance of the ISIs\\n' +\r\n                      '    \"\"\"\\n' +\r\n                      '    A = 0.05\\n' +\r\n                      '    return A*x\\n' +\r\n                      '\\n' +\r\n                      '\\n' +\r\n                      'means = []\\n' +\r\n                      'variances = []\\n' +\r\n                      'cvs = []\\n' +\r\n                      'taus = np.linspace(1, 100, 100)\\n' +\r\n                      'for tau in taus:\\n' +\r\n                      '    t = refractory_homogeneous_poisson(100, 10, tau/1000, 30)\\n' +\r\n                      '    means.append(np.mean(to_isi(t, join=True))*100 - 1)\\n' +\r\n                      '    variances.append(np.var(to_isi(t, join=True))*10000 - 1)\\n' +\r\n                      '\\n' +\r\n                      'plt.scatter(taus, means, label=r\\'$\\\\displaystyle\\\\text{r}\\\\langle\\\\tau\\\\rangle - 1$\\', marker=\\'.\\')\\n' +\r\n                      'plt.scatter(taus, variances, label=r\\'$\\\\displaystyle\\\\text{r}^2\\\\sigma_{\\\\tau}^2 - 1$\\', marker=\\'.\\')\\n' +\r\n                      'plt.plot(taus, mean_fit(taus), label=\\'Mean fit\\', c=\\'r\\')\\n' +\r\n                      'plt.plot(taus, var_fit(taus), label=\\'Var fit\\', c=\\'b\\')\\n' +\r\n                      'plt.xlabel(r\\'$\\\\displaystyle\\\\tau_{\\\\text{ref}}$ (ms)\\')\\n' +\r\n                      'plt.ylabel(\\'k\\')\\n' +\r\n                      'plt.legend()\\n' +\r\n                      'plt.show()'}\r\n                    </Highlight>\r\n                  </CustomCard>\r\n                </Grid>\r\n                <Grid key={1} item className={'neur__questions__gridR'}>\r\n                  <CardMedia image={method_of_moments} className={'neur__questions__image'}/>\r\n                </Grid>\r\n              </Grid>\r\n              <hr className={'neur__hr'}/>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Grid container spacing={3} justify='center'>\r\n                  <Grid key={0} item className={'neur__questions__gridL'}>\r\n                    <Typography>\r\n                      Using the mean as an example metric, we fit a curve of the form\r\n                      <BlockMath>\r\n                        {'f(\\\\tau_{\\\\text{ref}}) = A(1-e^{-B\\\\tau_{\\\\text{ref}}}) + C\\\\tau_{\\\\text{ref}}'}\r\n                      </BlockMath>\r\n                      and use this to plot some gamma functions against our ISI distribution.\r\n                      These plots show an expected trend, that the fit is best around <InlineMath>{'\\\\tau_{\\\\text{ref}}=38'}</InlineMath> ms and worse\r\n                      the further deviated from this. We repeat this for the variance fit of form\r\n                      <BlockMath>\r\n                        {'f(\\\\tau_{\\\\text{ref}}) = D\\\\tau_{\\\\text{ref}}'}\r\n                      </BlockMath>\r\n                    </Typography>\r\n                    <CustomCard title={'Code'} avatar={<Code />} expanded={false}>\r\n                      <Highlight language={'python'}>\r\n                        {'def mom_experiment(tau, fit):\\n' +\r\n                        '    \"\"\"\\n' +\r\n                        '    Runs an instant of a _fit experiment which fits a gamma distribution with the corresponding k value to the simulated data\\n' +\r\n                        '    \"\"\"\\n' +\r\n                        '    x = np.linspace(0, 200, 100)\\n' +\r\n                        '    t = refractory_homogeneous_poisson(100, 10, tau/1000, 30)\\n' +\r\n                        '    plot_interval_hist(t, 0, True, 0.33, label=\\'Data\\', density=True,\\n' +\r\n                        '                       title=fit + r\\' fit ($\\\\displaystyle\\\\tau_{\\\\text{ref}}=$\\' + str(tau) + \\'ms)\\')\\n' +\r\n                        '    if fit == \\'Mean\\':\\n' +\r\n                        '        k = mean_fit(tau)\\n' +\r\n                        '    elif fit == \\'Variance\\':\\n' +\r\n                        '        k = var_fit(tau)\\n' +\r\n                        '    plt.plot(x, gamma.pdf(x, 1 + k, scale=1000/100), label=\\'Gamma fit\\')\\n' +\r\n                        '\\n' +\r\n                        'fig = matplotlib.pyplot.gcf()\\n' +\r\n                        'fig.set_size_inches(10, 10)\\n' +\r\n                        'plt.subplot(3, 1, 1)\\n' +\r\n                        'mom_experiment(15, \\'Mean\\')\\n' +\r\n                        'plt.xlabel(\\'\\')\\n' +\r\n                        'plt.legend()\\n' +\r\n                        'plt.subplot(3, 1, 2)\\n' +\r\n                        'mom_experiment(38, \\'Mean\\')\\n' +\r\n                        'plt.xlabel(\\'\\')\\n' +\r\n                        'plt.subplot(3, 1, 3)\\n' +\r\n                        'mom_experiment(100, \\'Mean\\')\\n' +\r\n                        'plt.tight_layout()\\n' +\r\n                        'plt.show()\\n' +\r\n                        '\\n' +\r\n                        'fig = matplotlib.pyplot.gcf()\\n' +\r\n                        'fig.set_size_inches(10, 10)\\n' +\r\n                        'plt.subplot(3, 1, 1)\\n' +\r\n                        'mom_experiment(15, \\'Variance\\')\\n' +\r\n                        'plt.xlabel(\\'\\')\\n' +\r\n                        'plt.legend()\\n' +\r\n                        'plt.subplot(3, 1, 2)\\n' +\r\n                        'mom_experiment(38, \\'Variance\\')\\n' +\r\n                        'plt.xlabel(\\'\\')\\n' +\r\n                        'plt.subplot(3, 1, 3)\\n' +\r\n                        'mom_experiment(100, \\'Variance\\')\\n' +\r\n                        'plt.tight_layout()\\n' +\r\n                        'plt.show()'}\r\n                      </Highlight>\r\n                    </CustomCard>\r\n                  </Grid>\r\n                  <Grid key={1} item className={'neur__questions__gridR'}>\r\n                    <Grid container spacing={0} justify='center'>\r\n                      <Grid key={0} item className={'neur__questions__gridL'}>\r\n                        <CardMedia image={mean_fit} className={'neur__questions__image--square'}/>\r\n                      </Grid>\r\n                      <Grid key={1} item className={'neur__questions__gridL'}>\r\n                        <CardMedia image={var_fit} className={'neur__questions__image--square'}/>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <hr className={'neur__hr'}/>\r\n              <Grid container spacing={3} justify='center'>\r\n                <Typography gutterBottom={true}>\r\n                  While these fits do show some qualitative deviation from our proposed model, ideally we would want some way to quantify this.\r\n                  This is where EDF (empirical distribution function) statistics come into play. Initially, the Kolmogorov-Smirnov test was thought\r\n                  to be a good way to quantify the goodness of fit of our model but it was later found that the p-values of this test are significantly\r\n                  shifted if the model contained parameters that were estimated from data (which is done here in the case of the shape parameter <InlineMath>{'1+k'}</InlineMath>).\r\n                  <br/><br/>\r\n                  To account for this estimation, we turn to Goodness-of-Fit-Techniques by Ralph B. D'Agostino where methods are discussed that deal\r\n                  with the case where the shape parameter of a gamma distribution is estimated. The steps of the method are as follows:\r\n                  <ol>\r\n                    <li>Put the sample in ascending order <InlineMath>{'X_{(1)}<\\\\dots <X_{(n)}'}</InlineMath></li>\r\n                    <li>Estimate <InlineMath>{'m=k+1'}</InlineMath> by maximum likelihood estimation (<InlineMath>{'\\\\hat m'}</InlineMath>)</li>\r\n                    <li>Calculate <InlineMath>{'Z_{(i)}=\\\\frac{1}{\\\\beta^{\\\\hat{m}}\\\\Gamma(\\\\hat m)}\\\\int_0^{X_i}x^{\\\\hat m-1}e^{\\\\frac{-x}{\\\\beta}}\\\\text{dx}'}</InlineMath>\r\n                      &nbsp;for <InlineMath>{'i=1,\\\\dots ,n'}</InlineMath> (where <InlineMath>{'\\\\beta = \\\\text{r}'}</InlineMath>)</li>\r\n                    <li>Calculate the EDF statistics using the values of <InlineMath>{'Z_{(i)}'}</InlineMath></li>\r\n                    <li>Reject the null hypothesis that the the data follows the given distribution if the the value of the statistics are greater\r\n                      than the tabulated values for a desired significance level <InlineMath>{'\\\\alpha'}</InlineMath> and for appropriate <InlineMath>{'\\\\hat m'}</InlineMath></li>\r\n                  </ol>\r\n                  We will first assume that in step 2, our variant of the method of moments is used to estimate <InlineMath>{'m'}</InlineMath> and we will later discuss the MLE solution.\r\n                  We will now show that the integral in step 3 can be simplified to the incomplete gamma function:\r\n                  <BlockMath>\r\n                    {'\\\\Gamma_{\\\\text{inc}}(X; m)=\\\\frac{1}{\\\\Gamma(m)}\\\\int_0^X x^{m-1}e^{-m}\\\\text{dx}'}\r\n                  </BlockMath>\r\n                  Using the substitution <InlineMath>{'x\\'=\\\\frac{x}{\\\\beta}'}</InlineMath> we can obtain the desired result:\r\n                  <BlockMath>\r\n                    {'\\\\begin{aligned}\\n' +\r\n                    'Z_{(i)}&=\\\\frac{1}{\\\\beta^{\\\\hat{m}}\\\\Gamma(\\\\hat{m})}\\\\int_0^{X_i}(x\\'\\\\beta)^{\\\\hat{m}-1}e^{-x\\'}\\\\beta \\\\text{dx\\'}\\\\\\\\\\n' +\r\n                    '                    &=\\\\frac{\\\\beta^{\\\\hat{m}-1}\\\\beta}{\\\\beta^{\\\\hat{m}}}\\\\Gamma_{\\\\text{inc}}(X_{(i)};\\\\hat{m})=\\\\Gamma_{\\\\text{inc}}(X_{(i)};\\\\hat{m})\\n' +\r\n                    '                    \\\\end{aligned}'}\r\n                  </BlockMath>\r\n                  Finally, the EDF statistics that we will be using include the Kolmogorov statistic <InlineMath>{'D'}</InlineMath> (for which no p-values are available so we will simply state it) defined as:\r\n                  <BlockMath>\r\n                    {'D = \\\\sup_x|F_n(x)-F(x)|'}\r\n                  </BlockMath>\r\n                  where <InlineMath>{'F(x)'}</InlineMath> is the cdf of the model distribution (gamma distribution in our case) and <InlineMath>{'F_n(x)'}</InlineMath> is the\r\n                  empirical cumulative distribution function which we will obtain from the data. This statistic is part of the <i>supremum statistics</i>\r\n                  &nbsp;which are different from the other three statistics we will now describe.\r\n                  <br/><br/>\r\n                  The Cramér–von Mises statistic, <InlineMath>{'W^2'}</InlineMath>, and the Anderson-Darling statistic, <InlineMath>{'A^2'}</InlineMath>, are both of the form:\r\n                  <BlockMath>\r\n                    {'Q = n\\\\int^\\\\infty_{-\\\\infty}\\\\big(F_n(x)-F(x)\\\\big)^2\\\\psi(x)\\\\text{dF(x)}'}\r\n                  </BlockMath>\r\n                  where <InlineMath>{'\\\\psi(x) = 1'}</InlineMath> for <InlineMath>{'W^2'}</InlineMath> and <InlineMath>{'\\\\psi(x) = \\\\frac{1}{F(x)(1-F(x))}'}</InlineMath>\r\n                  for <InlineMath>{'A^2'}</InlineMath>.\r\n                  Finally, the last statistic we will calculate is the Watson statistic, <InlineMath>{'U^2'}</InlineMath> which has a slightly different format:\r\n                  <BlockMath>\r\n                    {'U^2=n\\\\int^\\\\infty_{-\\\\infty}\\\\Big\\\\{F_n(x)-F(x)-\\\\int_{-\\\\infty}^\\\\infty \\\\big\\\\{F_n(x)-F(x)\\\\big\\\\}\\\\text{dF(x)}\\\\Big\\\\}^2\\\\text{dF(x)}'}\r\n                  </BlockMath>\r\n                  These three statistics belong to the quadratic statistics and we will obtain p-values for all three and hence, be able to use these for step 5.\r\n                </Typography>\r\n              </Grid>\r\n            </CustomCard>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport NavigationBar from './components/NavigationBar';\r\nimport {connect} from 'react-redux';\r\nimport Normal from './Normal';\r\nimport Poisson from './Poisson';\r\nimport Chapter1 from './neur/chapter1';\r\nimport IPython from './ipython';\r\nimport RayTracing from './rayTracing';\r\nimport NeurInfo from './neur/neurInfo';\r\nimport NeurExt from './neur/extensions';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavigationBar />\r\n        <div className={this.props.selectedTab === 'home' ? '' : 'invisible'}>\r\n          <header className={'App-header'}>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            Data Visualisation\r\n          </header>\r\n        </div>\r\n        <div className={this.props.selectedTab === 'normal' ? '' : 'invisible'}>\r\n          <Normal />\r\n        </div>\r\n        <div className={this.props.selectedTab === 'poisson' ? '' : 'invisible'}>\r\n          <Poisson />\r\n        </div>\r\n        <div className={this.props.selectedTab === 'neurInfo' ? '' : 'invisible'}>\r\n          <NeurInfo />\r\n        </div>\r\n        <div className={this.props.selectedTab === 'chapter1' ? '' : 'invisible'}>\r\n          <Chapter1 />\r\n        </div>\r\n        <div className={this.props.selectedTab === 'neurExt' ? '' : 'invisible'}>\r\n          <NeurExt />\r\n        </div>\r\n        <div className={this.props.selectedTab === 'rayTracing' ? '' : 'invisible'}>\r\n          <RayTracing />\r\n        </div>\r\n        <div className={this.props.selectedTab === 'ipython' ? '' : 'invisible'}>\r\n          <IPython />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // return (\r\n  //   <Switch>\r\n  //     <Route exact path=\"/\" component={Header} />\r\n  //     <Route path=\"/stats\" component={Stats} />\r\n  //   </Switch>\r\n  // );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    selectedTab: state.selectedTab\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport produce from 'immer';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {linToLog} from './components/utils';\r\nimport {createMuiTheme, MuiThemeProvider} from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    secondary: {\r\n      main: '#FFFFFF'\r\n    }\r\n  }\r\n});\r\n\r\nconst initialState = {\r\n  mean: {\r\n    normal: 1,\r\n    poisson: 100\r\n  },\r\n  stDev: {\r\n    normal: 10,\r\n    poisson: 10\r\n  },\r\n  lambda : {\r\n    poisson: 5\r\n  },\r\n  samples: {\r\n    normal: 1000,\r\n    poisson: 1000\r\n  },\r\n  updateData: {\r\n    normal: false,\r\n    poisson: false\r\n  },\r\n  performanceChart: {\r\n    normal: false,\r\n    poisson: false\r\n  },\r\n  selectedTab: 'home',\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SLIDER_CHANGE':\r\n      return produce(state, draft => {\r\n        draft[action.value][action.name] = linToLog(action.newValue);\r\n      });\r\n    case 'INPUT_CHANGE':\r\n      return produce(state, draft => {\r\n        draft[action.value][action.name] = action.event.target.value === '' ? '' : Number(action.event.target.value);\r\n      });\r\n    case 'CLIP':\r\n      if (state[action.value][action.name] > action.max) {\r\n        return produce(state, draft => {\r\n          draft[action.value][action.name] = action.max;\r\n        });\r\n      } else if (state[action.value][action.name] < 0) {\r\n        return produce(state, draft => {\r\n          draft[action.value][action.name] = 0;\r\n        });\r\n      } else {\r\n        return state;\r\n      }\r\n    case 'TOGGLE_UPDATE_DATA':\r\n      return produce(state, draft => {\r\n        draft.updateData[action.name] = !state.updateData[action.name];\r\n      });\r\n    case 'TOGGLE_PERFORMANCE_CHART':\r\n      return produce(state, draft => {\r\n        draft.updateData[action.name] = !state.updateData[action.name];\r\n        draft.performanceChart[action.name] = !state.performanceChart[action.name];\r\n      });\r\n    case 'SET_TAB':\r\n      return {\r\n        ...state,\r\n        selectedTab: action.value\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nconst store = createStore(reducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}